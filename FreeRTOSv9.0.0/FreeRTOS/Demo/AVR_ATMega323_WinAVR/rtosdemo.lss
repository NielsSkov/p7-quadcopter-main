
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  00002574  00002608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000067c  00800218  00800218  00002620  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007fd  00000000  00000000  00002760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fce  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c72  00000000  00000000  00005f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f86  00000000  00000000  00006b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000600  00000000  00000000  00009b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001414  00000000  00000000  0000a124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e22  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000d35a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_36>
      94:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_37>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e7       	ldi	r30, 0x74	; 116
      fc:	f5 e2       	ldi	r31, 0x25	; 37
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	18 e0       	ldi	r17, 0x08	; 8
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 39       	cpi	r26, 0x94	; 148
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ac 00 	call	0x158	; 0x158 <main>
     122:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <ledTest>:
}
/*-----------------------------------------------------------*/

void ledTest( void *pvParameters )
{
  DDRE = 0xFF;
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	8d b9       	out	0x0d, r24	; 13
  while(1)
  {
    PORTE = 0xFF;
     12e:	4f ef       	ldi	r20, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     130:	20 e9       	ldi	r18, 0x90	; 144
     132:	31 e0       	ldi	r19, 0x01	; 1
     134:	4e b9       	out	0x0e, r20	; 14
     136:	88 e8       	ldi	r24, 0x88	; 136
     138:	93 e1       	ldi	r25, 0x13	; 19
     13a:	f9 01       	movw	r30, r18
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <ledTest+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     142:	d9 f7       	brne	.-10     	; 0x13a <ledTest+0x10>
    _delay_ms(500);
    PORTE = 0x00;
     144:	1e b8       	out	0x0e, r1	; 14
     146:	88 e8       	ldi	r24, 0x88	; 136
     148:	93 e1       	ldi	r25, 0x13	; 19
     14a:	f9 01       	movw	r30, r18
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <ledTest+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     152:	d9 f7       	brne	.-10     	; 0x14a <ledTest+0x20>
     154:	ef cf       	rjmp	.-34     	; 0x134 <ledTest+0xa>

00000156 <vApplicationIdleHook>:
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	//vCoRoutineSchedule();
}
     156:	08 95       	ret

00000158 <main>:

#include <util/delay.h>
void ledTest( void *pvParameters );

short main( void )
{  
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
	//vStartRegTestTasks();

	/* Create the tasks defined within this file. */
	//xTaskCreate( vErrorChecks, "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY-1, NULL );
  
  xTaskCreate( ledTest, "Testing", 2*configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, NULL );
     15e:	85 e9       	ldi	r24, 0x95	; 149
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	72 e0       	ldi	r23, 0x02	; 2
     166:	4a ea       	ldi	r20, 0xAA	; 170
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	03 e0       	ldi	r16, 0x03	; 3
     170:	ee 24       	eor	r14, r14
     172:	ff 24       	eor	r15, r15
     174:	0e 94 93 09 	call	0x1326	; 0x1326 <xTaskCreate>
  // while(1)
  // {
    // PORTE = 0x00;
  // }
  
	vTaskStartScheduler();
     178:	0e 94 8c 0a 	call	0x1518	; 0x1518 <vTaskStartScheduler>

	return 0;
}
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0f 91       	pop	r16
     182:	ff 90       	pop	r15
     184:	ef 90       	pop	r14
     186:	08 95       	ret

00000188 <vParTestInitialise>:

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
     188:	8f ef       	ldi	r24, 0xFF	; 255
     18a:	80 93 08 02 	sts	0x0208, r24

	/* Set port B direction to outputs.  Start with all output off. */
	DDRB = partstALL_BITS_OUTPUT;
     18e:	84 b9       	out	0x04, r24	; 4
	PORTB = ucCurrentOutputValue;
     190:	80 91 08 02 	lds	r24, 0x0208
     194:	85 b9       	out	0x05, r24	; 5
}
     196:	08 95       	ret

00000198 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
     198:	1f 93       	push	r17
     19a:	28 2f       	mov	r18, r24
unsigned char ucBit;

	if( uxLED <= partstMAX_OUTPUT_LED )
     19c:	88 30       	cpi	r24, 0x08	; 8
     19e:	e8 f4       	brcc	.+58     	; 0x1da <vParTestToggleLED+0x42>
	{
		ucBit = ( ( unsigned char ) 1 ) << uxLED;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <vParTestToggleLED+0x12>
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	2a 95       	dec	r18
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <vParTestToggleLED+0xe>
     1ae:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     1b0:	0e 94 88 03 	call	0x710	; 0x710 <vTaskSuspendAll>
		{
			if( ucCurrentOutputValue & ucBit )
     1b4:	80 91 08 02 	lds	r24, 0x0208
     1b8:	81 23       	and	r24, r17
     1ba:	29 f0       	breq	.+10     	; 0x1c6 <vParTestToggleLED+0x2e>
			{
				ucCurrentOutputValue &= ~ucBit;
     1bc:	80 91 08 02 	lds	r24, 0x0208
     1c0:	10 95       	com	r17
     1c2:	18 23       	and	r17, r24
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <vParTestToggleLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     1c6:	80 91 08 02 	lds	r24, 0x0208
     1ca:	18 2b       	or	r17, r24
     1cc:	10 93 08 02 	sts	0x0208, r17
			}

			PORTB = ucCurrentOutputValue;
     1d0:	80 91 08 02 	lds	r24, 0x0208
     1d4:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();			
     1d6:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
	}
}
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <vParTestSetLED>:
	PORTB = ucCurrentOutputValue;
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	28 2f       	mov	r18, r24
     1e4:	06 2f       	mov	r16, r22
unsigned char ucBit = ( unsigned char ) 1;

	if( uxLED <= partstMAX_OUTPUT_LED )
     1e6:	88 30       	cpi	r24, 0x08	; 8
     1e8:	d8 f4       	brcc	.+54     	; 0x220 <vParTestSetLED+0x42>
	{
		ucBit <<= uxLED;	
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <vParTestSetLED+0x16>
     1f0:	88 0f       	add	r24, r24
     1f2:	99 1f       	adc	r25, r25
     1f4:	2a 95       	dec	r18
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <vParTestSetLED+0x12>
     1f8:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     1fa:	0e 94 88 03 	call	0x710	; 0x710 <vTaskSuspendAll>
		{
			if( xValue == pdTRUE )
     1fe:	01 30       	cpi	r16, 0x01	; 1
     200:	29 f4       	brne	.+10     	; 0x20c <vParTestSetLED+0x2e>
			{
				ucBit ^= ( unsigned char ) 0xff;
				ucCurrentOutputValue &= ucBit;
     202:	80 91 08 02 	lds	r24, 0x0208
     206:	10 95       	com	r17
     208:	18 23       	and	r17, r24
     20a:	03 c0       	rjmp	.+6      	; 0x212 <vParTestSetLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     20c:	80 91 08 02 	lds	r24, 0x0208
     210:	18 2b       	or	r17, r24
     212:	10 93 08 02 	sts	0x0208, r17
			}

			PORTB = ucCurrentOutputValue;
     216:	80 91 08 02 	lds	r24, 0x0208
     21a:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();
     21c:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
	}
}
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	08 95       	ret

00000226 <vSerialClose>:
	( void ) xPort;

	/* Turn off the interrupts.  We may also want to delete the queues and/or
	re-install the original ISR. */

	portENTER_CRITICAL();
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	0f 92       	push	r0
	{
		vInterruptOff();
     22c:	e9 ec       	ldi	r30, 0xC9	; 201
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	8f 7d       	andi	r24, 0xDF	; 223
     234:	80 83       	st	Z, r24
		ucByte = UCSR1B;
     236:	80 81       	ld	r24, Z
		ucByte &= ~serRX_INT_ENABLE;
     238:	8f 77       	andi	r24, 0x7F	; 127
		UCSR1B = ucByte;
     23a:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
}
     240:	08 95       	ret

00000242 <__vector_37>:
	}
}
/*-----------------------------------------------------------*/

SIGNAL( USART1_UDRE_vect )  //Changed from old name in ATmega323 (SIG_UART_DATA) to new name in ATmega3560 (USART1_UDRE_vect)
{
     242:	1f 92       	push	r1
     244:	0f 92       	push	r0
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	0f 92       	push	r0
     24a:	0b b6       	in	r0, 0x3b	; 59
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
     250:	2f 93       	push	r18
     252:	3f 93       	push	r19
     254:	4f 93       	push	r20
     256:	5f 93       	push	r21
     258:	6f 93       	push	r22
     25a:	7f 93       	push	r23
     25c:	8f 93       	push	r24
     25e:	9f 93       	push	r25
     260:	af 93       	push	r26
     262:	bf 93       	push	r27
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	0f 92       	push	r0
     26e:	0f 92       	push	r0
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
     274:	80 91 1a 02 	lds	r24, 0x021A
     278:	90 91 1b 02 	lds	r25, 0x021B
     27c:	be 01       	movw	r22, r28
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	ae 01       	movw	r20, r28
     284:	4e 5f       	subi	r20, 0xFE	; 254
     286:	5f 4f       	sbci	r21, 0xFF	; 255
     288:	0e 94 2f 0c 	call	0x185e	; 0x185e <xQueueReceiveFromISR>
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	21 f4       	brne	.+8      	; 0x298 <__vector_37+0x56>
	{
		/* Send the next character queued for Tx. */
		UDR1 = cChar;
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	80 93 ce 00 	sts	0x00CE, r24
     296:	05 c0       	rjmp	.+10     	; 0x2a2 <__vector_37+0x60>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
     298:	80 91 c9 00 	lds	r24, 0x00C9
     29c:	8f 7d       	andi	r24, 0xDF	; 223
     29e:	80 93 c9 00 	sts	0x00C9, r24
	}
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	cf 91       	pop	r28
     2a8:	df 91       	pop	r29
     2aa:	ff 91       	pop	r31
     2ac:	ef 91       	pop	r30
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	0f 90       	pop	r0
     2c4:	0b be       	out	0x3b, r0	; 59
     2c6:	0f 90       	pop	r0
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	0f 90       	pop	r0
     2cc:	1f 90       	pop	r1
     2ce:	18 95       	reti

000002d0 <__vector_36>:
	portEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

SIGNAL( USART1_RX_vect )  //Changed from old name in ATmega323 (SIG_UART_RECV) to new name in ATmega3560 (USART1_RX_vect)
{
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	0b b6       	in	r0, 0x3b	; 59
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	0f 92       	push	r0
     2fc:	0f 92       	push	r0
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     302:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR1;
     304:	80 91 ce 00 	lds	r24, 0x00CE
     308:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
     30a:	80 91 18 02 	lds	r24, 0x0218
     30e:	90 91 19 02 	lds	r25, 0x0219
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	ae 01       	movw	r20, r28
     31a:	4e 5f       	subi	r20, 0xFE	; 254
     31c:	5f 4f       	sbci	r21, 0xFF	; 255
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	0e 94 80 0c 	call	0x1900	; 0x1900 <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	88 23       	and	r24, r24
     328:	11 f0       	breq	.+4      	; 0x32e <__vector_36+0x5e>
	{
		taskYIELD();
     32a:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
	}
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	7f 91       	pop	r23
     344:	6f 91       	pop	r22
     346:	5f 91       	pop	r21
     348:	4f 91       	pop	r20
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0b be       	out	0x3b, r0	; 59
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <xSerialPutChar>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	0f 92       	push	r0
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	69 83       	std	Y+1, r22	; 0x01
	/* Only one port is supported. */
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
     368:	80 91 1a 02 	lds	r24, 0x021A
     36c:	90 91 1b 02 	lds	r25, 0x021B
     370:	be 01       	movw	r22, r28
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <xQueueGenericSend>
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	11 f0       	breq	.+4      	; 0x384 <xSerialPutChar+0x28>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	06 c0       	rjmp	.+12     	; 0x390 <xSerialPutChar+0x34>
	{
		return pdFAIL;
	}

	vInterruptOn();
     384:	80 91 c9 00 	lds	r24, 0x00C9
     388:	80 62       	ori	r24, 0x20	; 32
     38a:	80 93 c9 00 	sts	0x00C9, r24
     38e:	81 e0       	ldi	r24, 0x01	; 1

	return pdPASS;
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <xSerialGetChar>:
	/* Only one port is supported. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
     398:	80 91 18 02 	lds	r24, 0x0218
     39c:	90 91 19 02 	lds	r25, 0x0219
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <xQueueGenericReceive>
     3a6:	81 11       	cpse	r24, r1
     3a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return pdFALSE;
	}
}
     3aa:	08 95       	ret

000003ac <xSerialPortInitMinimal>:
	UCSR1B = ucInByte;										\
}
/*-----------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	7b 01       	movw	r14, r22
     3b8:	8c 01       	movw	r16, r24
     3ba:	d4 2e       	mov	r13, r20
unsigned long ulBaudRateCounter;
unsigned char ucByte;

	portENTER_CRITICAL();
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	0f 92       	push	r0
	{
		/* Create the queues used by the com test task. */
		xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     3c2:	84 2f       	mov	r24, r20
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xQueueGenericCreate>
     3cc:	90 93 19 02 	sts	0x0219, r25
     3d0:	80 93 18 02 	sts	0x0218, r24
		xCharsForTx = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     3d4:	8d 2d       	mov	r24, r13
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xQueueGenericCreate>
     3de:	90 93 1b 02 	sts	0x021B, r25
     3e2:	80 93 1a 02 	sts	0x021A, r24

		/* Calculate the baud rate register value from the equation in the
		data sheet. */
		ulBaudRateCounter = ( configCPU_CLOCK_HZ / ( serBAUD_DIV_CONSTANT * ulWantedBaud ) ) - ( unsigned long ) 1;
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	ee 0c       	add	r14, r14
     3ea:	ff 1c       	adc	r15, r15
     3ec:	00 1f       	adc	r16, r16
     3ee:	11 1f       	adc	r17, r17
     3f0:	9a 95       	dec	r25
     3f2:	d1 f7       	brne	.-12     	; 0x3e8 <xSerialPortInitMinimal+0x3c>
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	74 e2       	ldi	r23, 0x24	; 36
     3f8:	84 ef       	ldi	r24, 0xF4	; 244
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	a8 01       	movw	r20, r16
     3fe:	97 01       	movw	r18, r14
     400:	0e 94 8d 12 	call	0x251a	; 0x251a <__udivmodsi4>
     404:	21 50       	subi	r18, 0x01	; 1
     406:	30 40       	sbci	r19, 0x00	; 0
     408:	40 40       	sbci	r20, 0x00	; 0
     40a:	50 40       	sbci	r21, 0x00	; 0

		/* Set the baud rate. */	
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR1L = ucByte;
     40c:	20 93 cc 00 	sts	0x00CC, r18

		ulBaudRateCounter >>= ( unsigned long ) 8;
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
     410:	23 2f       	mov	r18, r19
     412:	34 2f       	mov	r19, r20
     414:	45 2f       	mov	r20, r21
     416:	55 27       	eor	r21, r21
		UBRR1H = ucByte;
     418:	20 93 cd 00 	sts	0x00CD, r18

		/* Enable the Rx interrupt.  The Tx interrupt will get enabled
		later. Also enable the Rx and Tx. */
		UCSR1B = ( serRX_INT_ENABLE | serRX_ENABLE | serTX_ENABLE );
     41c:	88 e9       	ldi	r24, 0x98	; 152
     41e:	80 93 c9 00 	sts	0x00C9, r24

		/* Set the data bits to 8. */
		UCSR1C = ( serUCSRC_SELECT | serEIGHT_DATA_BITS );
     422:	86 e8       	ldi	r24, 0x86	; 134
     424:	80 93 ca 00 	sts	0x00CA, r24
	}
	portEXIT_CRITICAL();
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
	
	/* Unlike other ports, this serial code does not allow for more than one
	com port.  We therefore don't return a pointer to a port structure and can
	instead just return NULL. */
	return NULL;
}
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	08 95       	ret

0000043c <xAreRegTestTasksStillRunning>:
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreRegTestTasksStillRunning( void )
{
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	80 91 1c 02 	lds	r24, 0x021C
     442:	88 23       	and	r24, r24
     444:	09 f4       	brne	.+2      	; 0x448 <xAreRegTestTasksStillRunning+0xc>
     446:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     448:	89 2f       	mov	r24, r25
     44a:	08 95       	ret

0000044c <prvRegisterCheck1>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	5"		);
     44c:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r0,		r31"	);
     44e:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	6"		);
     450:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r1,		r31"	);
     452:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	7"		);
     454:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r2,		r31"	);
     456:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	8"		);
     458:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r3,		r31"	);
     45a:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	9"		);
     45c:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r4,		r31"	);
     45e:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	10"		);
     460:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r5,		r31"	);
     462:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	11"		);
     464:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r6,		r31"	);
     466:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	12"		);
     468:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r7,		r31"	);
     46a:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	13"		);
     46c:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r8,		r31"	);
     46e:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	14"		);
     470:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r9,		r31"	);
     472:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	15"		);
     474:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r10,	r31"	);
     476:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	16"		);
     478:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r11,	r31"	);
     47a:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	17"		);
     47c:	f1 e1       	ldi	r31, 0x11	; 17
		asm( 	"MOV	r12,	r31"	);
     47e:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	18"		);
     480:	f2 e1       	ldi	r31, 0x12	; 18
		asm( 	"MOV	r13,	r31"	);
     482:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	19"		);
     484:	f3 e1       	ldi	r31, 0x13	; 19
		asm( 	"MOV	r14,	r31"	);
     486:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	20"		);
     488:	f4 e1       	ldi	r31, 0x14	; 20
		asm( 	"MOV	r15,	r31"	);
     48a:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	21"		);
     48c:	05 e1       	ldi	r16, 0x15	; 21
		asm(	"LDI	r17,	22"		);
     48e:	16 e1       	ldi	r17, 0x16	; 22
		asm(	"LDI	r18,	23"		);
     490:	27 e1       	ldi	r18, 0x17	; 23
		asm(	"LDI	r19,	24"		);
     492:	38 e1       	ldi	r19, 0x18	; 24
		asm(	"LDI	r20,	25"		);
     494:	49 e1       	ldi	r20, 0x19	; 25
		asm(	"LDI	r21,	26"		);
     496:	5a e1       	ldi	r21, 0x1A	; 26
		asm(	"LDI	r22,	27"		);
     498:	6b e1       	ldi	r22, 0x1B	; 27
		asm(	"LDI	r23,	28"		);
     49a:	7c e1       	ldi	r23, 0x1C	; 28
		asm(	"LDI	r24,	29"		);
     49c:	8d e1       	ldi	r24, 0x1D	; 29
		asm(	"LDI	r25,	30"		);
     49e:	9e e1       	ldi	r25, 0x1E	; 30
		asm(	"LDI	r26,	31"		);
     4a0:	af e1       	ldi	r26, 0x1F	; 31
		asm(	"LDI	r27,	32"		);
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
		asm(	"LDI	r30,	33"		);
     4a4:	e1 e2       	ldi	r30, 0x21	; 33

		asm(	"LDI	r31,	5"			);
     4a6:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r0"			);
     4a8:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     4aa:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	6"			);
     4ae:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r1"			);
     4b0:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     4b2:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	7"			);
     4b6:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r2"			);
     4b8:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     4ba:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	8"			);
     4be:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r3"			);
     4c0:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     4c2:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	9"			);
     4c6:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r4"			);
     4c8:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     4ca:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	10"			);
     4ce:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r5"			);
     4d0:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     4d2:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	11"			);
     4d6:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r6"			);
     4d8:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     4da:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	12"			);
     4de:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r7"			);
     4e0:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     4e2:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	13"			);
     4e6:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r8"			);
     4e8:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     4ea:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	14"			);
     4ee:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r9"			);
     4f0:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     4f2:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	15"			);
     4f6:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r10"		);
     4f8:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     4fa:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	16"			);
     4fe:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r11"		);
     500:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     502:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	17"			);
     506:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r12"		);
     508:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     50a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	18"			);
     50e:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r13"		);
     510:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     512:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	19"			);
     516:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r14"		);
     518:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     51a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	20"			);
     51e:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r15"		);
     520:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     522:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	21"			);
     526:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r16"		);
     528:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     52a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	22"			);
     52e:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r17"		);
     530:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     532:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	23"			);
     536:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r18"		);
     538:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     53a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	24"			);
     53e:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r19"		);
     540:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     542:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	25"			);
     546:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r20"		);
     548:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     54a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	26"			);
     54e:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r21"		);
     550:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     552:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	27"			);
     556:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r22"		);
     558:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     55a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	28"			);
     55e:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r23"		);
     560:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     562:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	29"			);
     566:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r24"		);
     568:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     56a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	30"			);
     56e:	fe e1       	ldi	r31, 0x1E	; 30
		asm(	"CPSE	r31,	r25"		);
     570:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     572:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	31"			);
     576:	ff e1       	ldi	r31, 0x1F	; 31
		asm(	"CPSE	r31,	r26"		);
     578:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     57a:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	32"			);
     57e:	f0 e2       	ldi	r31, 0x20	; 32
		asm(	"CPSE	r31,	r27"		);
     580:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     582:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	33"			);
     586:	f1 e2       	ldi	r31, 0x21	; 33
		asm(	"CPSE	r31,	r30"		);
     588:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     58a:	00 92 1c 02 	sts	0x021C, r0
     58e:	5e cf       	rjmp	.-324    	; 0x44c <prvRegisterCheck1>

00000590 <prvRegisterCheck2>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	1"		);
     590:	f1 e0       	ldi	r31, 0x01	; 1
		asm( 	"MOV	r0,		r31"	);
     592:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	2"		);
     594:	f2 e0       	ldi	r31, 0x02	; 2
		asm( 	"MOV	r1,		r31"	);
     596:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	3"		);
     598:	f3 e0       	ldi	r31, 0x03	; 3
		asm( 	"MOV	r2,		r31"	);
     59a:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	4"		);
     59c:	f4 e0       	ldi	r31, 0x04	; 4
		asm( 	"MOV	r3,		r31"	);
     59e:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	5"		);
     5a0:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r4,		r31"	);
     5a2:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	6"		);
     5a4:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r5,		r31"	);
     5a6:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	7"		);
     5a8:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r6,		r31"	);
     5aa:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	8"		);
     5ac:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r7,		r31"	);
     5ae:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	9"		);
     5b0:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r8,		r31"	);
     5b2:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	10"		);
     5b4:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r9,		r31"	);
     5b6:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	11"		);
     5b8:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r10,	r31"	);
     5ba:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	12"		);
     5bc:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r11,	r31"	);
     5be:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	13"		);
     5c0:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r12,	r31"	);
     5c2:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	14"		);
     5c4:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r13,	r31"	);
     5c6:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	15"		);
     5c8:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r14,	r31"	);
     5ca:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	16"		);
     5cc:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r15,	r31"	);
     5ce:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	17"		);
     5d0:	01 e1       	ldi	r16, 0x11	; 17
		asm(	"LDI	r17,	18"		);
     5d2:	12 e1       	ldi	r17, 0x12	; 18
		asm(	"LDI	r18,	19"		);
     5d4:	23 e1       	ldi	r18, 0x13	; 19
		asm(	"LDI	r19,	20"		);
     5d6:	34 e1       	ldi	r19, 0x14	; 20
		asm(	"LDI	r20,	21"		);
     5d8:	45 e1       	ldi	r20, 0x15	; 21
		asm(	"LDI	r21,	22"		);
     5da:	56 e1       	ldi	r21, 0x16	; 22
		asm(	"LDI	r22,	23"		);
     5dc:	67 e1       	ldi	r22, 0x17	; 23
		asm(	"LDI	r23,	24"		);
     5de:	78 e1       	ldi	r23, 0x18	; 24
		asm(	"LDI	r24,	25"		);
     5e0:	89 e1       	ldi	r24, 0x19	; 25
		asm(	"LDI	r25,	26"		);
     5e2:	9a e1       	ldi	r25, 0x1A	; 26
		asm(	"LDI	r26,	27"		);
     5e4:	ab e1       	ldi	r26, 0x1B	; 27
		asm(	"LDI	r27,	28"		);
     5e6:	bc e1       	ldi	r27, 0x1C	; 28
		asm(	"LDI	r30,	29"		);
     5e8:	ed e1       	ldi	r30, 0x1D	; 29

		asm(	"LDI	r31,	1"			);
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
		asm(	"CPSE	r31,	r0"			);
     5ec:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     5ee:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	2"			);
     5f2:	f2 e0       	ldi	r31, 0x02	; 2
		asm(	"CPSE	r31,	r1"			);
     5f4:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     5f6:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	3"			);
     5fa:	f3 e0       	ldi	r31, 0x03	; 3
		asm(	"CPSE	r31,	r2"			);
     5fc:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     5fe:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	4"			);
     602:	f4 e0       	ldi	r31, 0x04	; 4
		asm(	"CPSE	r31,	r3"			);
     604:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     606:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	5"			);
     60a:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r4"			);
     60c:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     60e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	6"			);
     612:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r5"			);
     614:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     616:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	7"			);
     61a:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r6"			);
     61c:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     61e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	8"			);
     622:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r7"			);
     624:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     626:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	9"			);
     62a:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r8"			);
     62c:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     62e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	10"			);
     632:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r9"			);
     634:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     636:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	11"			);
     63a:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r10"		);
     63c:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     63e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	12"			);
     642:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r11"		);
     644:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     646:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	13"			);
     64a:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r12"		);
     64c:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     64e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	14"			);
     652:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r13"		);
     654:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     656:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	15"			);
     65a:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r14"		);
     65c:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     65e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	16"			);
     662:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r15"		);
     664:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     666:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	17"			);
     66a:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r16"		);
     66c:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     66e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	18"			);
     672:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r17"		);
     674:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     676:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	19"			);
     67a:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r18"		);
     67c:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     67e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	20"			);
     682:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r19"		);
     684:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     686:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	21"			);
     68a:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r20"		);
     68c:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     68e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	22"			);
     692:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r21"		);
     694:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     696:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	23"			);
     69a:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r22"		);
     69c:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     69e:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	24"			);
     6a2:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r23"		);
     6a4:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     6a6:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	25"			);
     6aa:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r24"		);
     6ac:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     6ae:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	26"			);
     6b2:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r25"		);
     6b4:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     6b6:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	27"			);
     6ba:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r26"		);
     6bc:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     6be:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	28"			);
     6c2:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r27"		);
     6c4:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     6c6:	00 92 1c 02 	sts	0x021C, r0
		asm(	"LDI	r31,	29"			);
     6ca:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r30"		);
     6cc:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     6ce:	00 92 1c 02 	sts	0x021C, r0
     6d2:	5e cf       	rjmp	.-324    	; 0x590 <prvRegisterCheck2>

000006d4 <vStartRegTestTasks>:
portBASE_TYPE xRegTestError = pdFALSE;

/*-----------------------------------------------------------*/

void vStartRegTestTasks( void )
{
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
	xTaskCreate( prvRegisterCheck1, "Reg1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     6da:	86 e2       	ldi	r24, 0x26	; 38
     6dc:	92 e0       	ldi	r25, 0x02	; 2
     6de:	69 e0       	ldi	r22, 0x09	; 9
     6e0:	72 e0       	ldi	r23, 0x02	; 2
     6e2:	45 e5       	ldi	r20, 0x55	; 85
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	00 e0       	ldi	r16, 0x00	; 0
     6ec:	ee 24       	eor	r14, r14
     6ee:	ff 24       	eor	r15, r15
     6f0:	0e 94 93 09 	call	0x1326	; 0x1326 <xTaskCreate>
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     6f4:	88 ec       	ldi	r24, 0xC8	; 200
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	6e e0       	ldi	r22, 0x0E	; 14
     6fa:	72 e0       	ldi	r23, 0x02	; 2
     6fc:	45 e5       	ldi	r20, 0x55	; 85
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	0e 94 93 09 	call	0x1326	; 0x1326 <xTaskCreate>
}
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     710:	80 91 1f 02 	lds	r24, 0x021F
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	80 93 1f 02 	sts	0x021F, r24
}
     71a:	08 95       	ret

0000071c <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     722:	20 91 22 02 	lds	r18, 0x0222
     726:	30 91 23 02 	lds	r19, 0x0223
	}
	portTICK_TYPE_EXIT_CRITICAL();
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     72e:	c9 01       	movw	r24, r18
     730:	08 95       	ret

00000732 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
     732:	20 91 22 02 	lds	r18, 0x0222
     736:	30 91 23 02 	lds	r19, 0x0223
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     73a:	c9 01       	movw	r24, r18
     73c:	08 95       	ret

0000073e <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
     73e:	80 91 28 02 	lds	r24, 0x0228
}
     742:	08 95       	ret

00000744 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	21 f4       	brne	.+8      	; 0x750 <pcTaskGetName+0xc>
     748:	80 91 1d 02 	lds	r24, 0x021D
     74c:	90 91 1e 02 	lds	r25, 0x021E
     750:	9c 01       	movw	r18, r24
     752:	27 5e       	subi	r18, 0xE7	; 231
     754:	3f 4f       	sbci	r19, 0xFF	; 255
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
     756:	c9 01       	movw	r24, r18
     758:	08 95       	ret

0000075a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     75a:	80 91 1f 02 	lds	r24, 0x021F
     75e:	88 23       	and	r24, r24
     760:	21 f0       	breq	.+8      	; 0x76a <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	80 93 21 02 	sts	0x0221, r24
     768:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     76a:	10 92 21 02 	sts	0x0221, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     76e:	20 91 20 02 	lds	r18, 0x0220
     772:	99 e0       	ldi	r25, 0x09	; 9
     774:	01 c0       	rjmp	.+2      	; 0x778 <vTaskSwitchContext+0x1e>
     776:	21 50       	subi	r18, 0x01	; 1
     778:	29 9f       	mul	r18, r25
     77a:	d0 01       	movw	r26, r0
     77c:	11 24       	eor	r1, r1
     77e:	a2 5d       	subi	r26, 0xD2	; 210
     780:	bd 4f       	sbci	r27, 0xFD	; 253
     782:	8c 91       	ld	r24, X
     784:	88 23       	and	r24, r24
     786:	b9 f3       	breq	.-18     	; 0x776 <vTaskSwitchContext+0x1c>
     788:	11 96       	adiw	r26, 0x01	; 1
     78a:	ed 91       	ld	r30, X+
     78c:	fc 91       	ld	r31, X
     78e:	12 97       	sbiw	r26, 0x02	; 2
     790:	02 80       	ldd	r0, Z+2	; 0x02
     792:	f3 81       	ldd	r31, Z+3	; 0x03
     794:	e0 2d       	mov	r30, r0
     796:	12 96       	adiw	r26, 0x02	; 2
     798:	fc 93       	st	X, r31
     79a:	ee 93       	st	-X, r30
     79c:	11 97       	sbiw	r26, 0x01	; 1
     79e:	cd 01       	movw	r24, r26
     7a0:	03 96       	adiw	r24, 0x03	; 3
     7a2:	e8 17       	cp	r30, r24
     7a4:	f9 07       	cpc	r31, r25
     7a6:	31 f4       	brne	.+12     	; 0x7b4 <vTaskSwitchContext+0x5a>
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	93 81       	ldd	r25, Z+3	; 0x03
     7ac:	12 96       	adiw	r26, 0x02	; 2
     7ae:	9c 93       	st	X, r25
     7b0:	8e 93       	st	-X, r24
     7b2:	11 97       	sbiw	r26, 0x01	; 1
     7b4:	11 96       	adiw	r26, 0x01	; 1
     7b6:	ed 91       	ld	r30, X+
     7b8:	fc 91       	ld	r31, X
     7ba:	12 97       	sbiw	r26, 0x02	; 2
     7bc:	86 81       	ldd	r24, Z+6	; 0x06
     7be:	97 81       	ldd	r25, Z+7	; 0x07
     7c0:	90 93 1e 02 	sts	0x021E, r25
     7c4:	80 93 1d 02 	sts	0x021D, r24
     7c8:	20 93 20 02 	sts	0x0220, r18
     7cc:	08 95       	ret

000007ce <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
     7ce:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     7d0:	80 91 26 02 	lds	r24, 0x0226
     7d4:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     7d6:	80 91 22 02 	lds	r24, 0x0222
     7da:	90 91 23 02 	lds	r25, 0x0223
     7de:	92 83       	std	Z+2, r25	; 0x02
     7e0:	81 83       	std	Z+1, r24	; 0x01
}
     7e2:	08 95       	ret

000007e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
     7e4:	fc 01       	movw	r30, r24
     7e6:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
     7ee:	40 91 22 02 	lds	r20, 0x0222
     7f2:	50 91 23 02 	lds	r21, 0x0223
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
     7f6:	90 91 26 02 	lds	r25, 0x0226
     7fa:	80 81       	ld	r24, Z
     7fc:	98 17       	cp	r25, r24
     7fe:	29 f0       	breq	.+10     	; 0x80a <xTaskCheckForTimeOut+0x26>
     800:	81 81       	ldd	r24, Z+1	; 0x01
     802:	92 81       	ldd	r25, Z+2	; 0x02
     804:	48 17       	cp	r20, r24
     806:	59 07       	cpc	r21, r25
     808:	e0 f4       	brcc	.+56     	; 0x842 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
     80a:	21 81       	ldd	r18, Z+1	; 0x01
     80c:	32 81       	ldd	r19, Z+2	; 0x02
     80e:	6d 91       	ld	r22, X+
     810:	7c 91       	ld	r23, X
     812:	11 97       	sbiw	r26, 0x01	; 1
     814:	ca 01       	movw	r24, r20
     816:	82 1b       	sub	r24, r18
     818:	93 0b       	sbc	r25, r19
     81a:	86 17       	cp	r24, r22
     81c:	97 07       	cpc	r25, r23
     81e:	88 f4       	brcc	.+34     	; 0x842 <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
     820:	24 1b       	sub	r18, r20
     822:	35 0b       	sbc	r19, r21
     824:	26 0f       	add	r18, r22
     826:	37 1f       	adc	r19, r23
     828:	2d 93       	st	X+, r18
     82a:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     82c:	80 91 26 02 	lds	r24, 0x0226
     830:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     832:	80 91 22 02 	lds	r24, 0x0222
     836:	90 91 23 02 	lds	r25, 0x0223
     83a:	92 83       	std	Z+2, r25	; 0x02
     83c:	81 83       	std	Z+1, r24	; 0x01
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	01 c0       	rjmp	.+2      	; 0x844 <xTaskCheckForTimeOut+0x60>
     842:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     848:	08 95       	ret

0000084a <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	80 93 21 02 	sts	0x0221, r24
}
     850:	08 95       	ret

00000852 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
     852:	e0 91 1d 02 	lds	r30, 0x021D
     856:	f0 91 1e 02 	lds	r31, 0x021E
     85a:	84 85       	ldd	r24, Z+12	; 0x0c
     85c:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     85e:	a0 91 1d 02 	lds	r26, 0x021D
     862:	b0 91 1e 02 	lds	r27, 0x021E
     866:	e0 91 1d 02 	lds	r30, 0x021D
     86a:	f0 91 1e 02 	lds	r31, 0x021E
     86e:	46 89       	ldd	r20, Z+22	; 0x16
     870:	24 e0       	ldi	r18, 0x04	; 4
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	24 1b       	sub	r18, r20
     876:	31 09       	sbc	r19, r1
     878:	1d 96       	adiw	r26, 0x0d	; 13
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
}
     880:	08 95       	ret

00000882 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	29 f4       	brne	.+10     	; 0x890 <xTaskNotifyStateClear+0xe>
     886:	e0 91 1d 02 	lds	r30, 0x021D
     88a:	f0 91 1e 02 	lds	r31, 0x021E
     88e:	01 c0       	rjmp	.+2      	; 0x892 <xTaskNotifyStateClear+0x10>
     890:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
     898:	85 a1       	ldd	r24, Z+37	; 0x25
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	11 f0       	breq	.+4      	; 0x8a2 <xTaskNotifyStateClear+0x20>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <xTaskNotifyStateClear+0x24>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     8a2:	15 a2       	std	Z+37, r1	; 0x25
     8a4:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		taskEXIT_CRITICAL();
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     8aa:	08 95       	ret

000008ac <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	7b 01       	movw	r14, r22
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     8ba:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
     8bc:	2d a1       	ldd	r18, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	8d a3       	std	Y+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
     8c2:	89 a1       	ldd	r24, Y+33	; 0x21
     8c4:	9a a1       	ldd	r25, Y+34	; 0x22
     8c6:	ab a1       	ldd	r26, Y+35	; 0x23
     8c8:	bc a1       	ldd	r27, Y+36	; 0x24
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	a1 1d       	adc	r26, r1
     8ce:	b1 1d       	adc	r27, r1
     8d0:	89 a3       	std	Y+33, r24	; 0x21
     8d2:	9a a3       	std	Y+34, r25	; 0x22
     8d4:	ab a3       	std	Y+35, r26	; 0x23
     8d6:	bc a3       	std	Y+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     8d8:	21 30       	cpi	r18, 0x01	; 1
     8da:	91 f5       	brne	.+100    	; 0x940 <vTaskNotifyGiveFromISR+0x94>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     8dc:	80 91 1f 02 	lds	r24, 0x021F
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f4       	brne	.+42     	; 0x90e <vTaskNotifyGiveFromISR+0x62>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     8e4:	8e 01       	movw	r16, r28
     8e6:	0e 5f       	subi	r16, 0xFE	; 254
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	c8 01       	movw	r24, r16
     8ec:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     8f0:	9e 89       	ldd	r25, Y+22	; 0x16
     8f2:	80 91 20 02 	lds	r24, 0x0220
     8f6:	89 17       	cp	r24, r25
     8f8:	10 f4       	brcc	.+4      	; 0x8fe <vTaskNotifyGiveFromISR+0x52>
     8fa:	90 93 20 02 	sts	0x0220, r25
     8fe:	89 e0       	ldi	r24, 0x09	; 9
     900:	98 9f       	mul	r25, r24
     902:	c0 01       	movw	r24, r0
     904:	11 24       	eor	r1, r1
     906:	82 5d       	subi	r24, 0xD2	; 210
     908:	9d 4f       	sbci	r25, 0xFD	; 253
     90a:	b8 01       	movw	r22, r16
     90c:	05 c0       	rjmp	.+10     	; 0x918 <vTaskNotifyGiveFromISR+0x6c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     90e:	be 01       	movw	r22, r28
     910:	64 5f       	subi	r22, 0xF4	; 244
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	88 e6       	ldi	r24, 0x68	; 104
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     91c:	e0 91 1d 02 	lds	r30, 0x021D
     920:	f0 91 1e 02 	lds	r31, 0x021E
     924:	9e 89       	ldd	r25, Y+22	; 0x16
     926:	86 89       	ldd	r24, Z+22	; 0x16
     928:	89 17       	cp	r24, r25
     92a:	50 f4       	brcc	.+20     	; 0x940 <vTaskNotifyGiveFromISR+0x94>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     92c:	e1 14       	cp	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	21 f0       	breq	.+8      	; 0x93a <vTaskNotifyGiveFromISR+0x8e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	f7 01       	movw	r30, r14
     936:	80 83       	st	Z, r24
     938:	03 c0       	rjmp	.+6      	; 0x940 <vTaskNotifyGiveFromISR+0x94>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 21 02 	sts	0x0221, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	f8 01       	movw	r30, r16
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     95c:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
     95e:	01 15       	cp	r16, r1
     960:	11 05       	cpc	r17, r1
     962:	41 f0       	breq	.+16     	; 0x974 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     964:	89 a1       	ldd	r24, Y+33	; 0x21
     966:	9a a1       	ldd	r25, Y+34	; 0x22
     968:	ab a1       	ldd	r26, Y+35	; 0x23
     96a:	bc a1       	ldd	r27, Y+36	; 0x24
     96c:	80 83       	st	Z, r24
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	a2 83       	std	Z+2, r26	; 0x02
     972:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     974:	3d a1       	ldd	r19, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     97a:	22 30       	cpi	r18, 0x02	; 2
     97c:	99 f0       	breq	.+38     	; 0x9a4 <xTaskGenericNotifyFromISR+0x56>
     97e:	23 30       	cpi	r18, 0x03	; 3
     980:	18 f4       	brcc	.+6      	; 0x988 <xTaskGenericNotifyFromISR+0x3a>
     982:	21 30       	cpi	r18, 0x01	; 1
     984:	19 f5       	brne	.+70     	; 0x9cc <xTaskGenericNotifyFromISR+0x7e>
     986:	05 c0       	rjmp	.+10     	; 0x992 <xTaskGenericNotifyFromISR+0x44>
     988:	23 30       	cpi	r18, 0x03	; 3
     98a:	e1 f0       	breq	.+56     	; 0x9c4 <xTaskGenericNotifyFromISR+0x76>
     98c:	24 30       	cpi	r18, 0x04	; 4
     98e:	f1 f4       	brne	.+60     	; 0x9cc <xTaskGenericNotifyFromISR+0x7e>
     990:	15 c0       	rjmp	.+42     	; 0x9bc <xTaskGenericNotifyFromISR+0x6e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     992:	89 a1       	ldd	r24, Y+33	; 0x21
     994:	9a a1       	ldd	r25, Y+34	; 0x22
     996:	ab a1       	ldd	r26, Y+35	; 0x23
     998:	bc a1       	ldd	r27, Y+36	; 0x24
     99a:	84 2b       	or	r24, r20
     99c:	95 2b       	or	r25, r21
     99e:	a6 2b       	or	r26, r22
     9a0:	b7 2b       	or	r27, r23
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <xTaskGenericNotifyFromISR+0x64>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     9a4:	89 a1       	ldd	r24, Y+33	; 0x21
     9a6:	9a a1       	ldd	r25, Y+34	; 0x22
     9a8:	ab a1       	ldd	r26, Y+35	; 0x23
     9aa:	bc a1       	ldd	r27, Y+36	; 0x24
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	a1 1d       	adc	r26, r1
     9b0:	b1 1d       	adc	r27, r1
     9b2:	89 a3       	std	Y+33, r24	; 0x21
     9b4:	9a a3       	std	Y+34, r25	; 0x22
     9b6:	ab a3       	std	Y+35, r26	; 0x23
     9b8:	bc a3       	std	Y+36, r27	; 0x24
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     9bc:	32 30       	cpi	r19, 0x02	; 2
     9be:	11 f4       	brne	.+4      	; 0x9c4 <xTaskGenericNotifyFromISR+0x76>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	3a c0       	rjmp	.+116    	; 0xa38 <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
     9c4:	49 a3       	std	Y+33, r20	; 0x21
     9c6:	5a a3       	std	Y+34, r21	; 0x22
     9c8:	6b a3       	std	Y+35, r22	; 0x23
     9ca:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     9cc:	31 30       	cpi	r19, 0x01	; 1
     9ce:	99 f5       	brne	.+102    	; 0xa36 <xTaskGenericNotifyFromISR+0xe8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     9d0:	80 91 1f 02 	lds	r24, 0x021F
     9d4:	88 23       	and	r24, r24
     9d6:	a9 f4       	brne	.+42     	; 0xa02 <xTaskGenericNotifyFromISR+0xb4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     9d8:	8e 01       	movw	r16, r28
     9da:	0e 5f       	subi	r16, 0xFE	; 254
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     9e4:	9e 89       	ldd	r25, Y+22	; 0x16
     9e6:	80 91 20 02 	lds	r24, 0x0220
     9ea:	89 17       	cp	r24, r25
     9ec:	10 f4       	brcc	.+4      	; 0x9f2 <xTaskGenericNotifyFromISR+0xa4>
     9ee:	90 93 20 02 	sts	0x0220, r25
     9f2:	89 e0       	ldi	r24, 0x09	; 9
     9f4:	98 9f       	mul	r25, r24
     9f6:	c0 01       	movw	r24, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	82 5d       	subi	r24, 0xD2	; 210
     9fc:	9d 4f       	sbci	r25, 0xFD	; 253
     9fe:	b8 01       	movw	r22, r16
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <xTaskGenericNotifyFromISR+0xbe>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     a02:	be 01       	movw	r22, r28
     a04:	64 5f       	subi	r22, 0xF4	; 244
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	88 e6       	ldi	r24, 0x68	; 104
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     a10:	e0 91 1d 02 	lds	r30, 0x021D
     a14:	f0 91 1e 02 	lds	r31, 0x021E
     a18:	9e 89       	ldd	r25, Y+22	; 0x16
     a1a:	86 89       	ldd	r24, Z+22	; 0x16
     a1c:	89 17       	cp	r24, r25
     a1e:	58 f4       	brcc	.+22     	; 0xa36 <xTaskGenericNotifyFromISR+0xe8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     a20:	e1 14       	cp	r14, r1
     a22:	f1 04       	cpc	r15, r1
     a24:	21 f0       	breq	.+8      	; 0xa2e <xTaskGenericNotifyFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	f7 01       	movw	r30, r14
     a2a:	80 83       	st	Z, r24
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <xTaskGenericNotifyFromISR+0xea>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 21 02 	sts	0x0221, r24
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <xTaskGenericNotifyFromISR+0xea>
     a36:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	fc 01       	movw	r30, r24
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
     a50:	70 68       	ori	r23, 0x80	; 128
     a52:	71 83       	std	Z+1, r23	; 0x01
     a54:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
     a56:	c6 81       	ldd	r28, Z+6	; 0x06
     a58:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
     a5a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     a5e:	8e 01       	movw	r16, r28
     a60:	0e 5f       	subi	r16, 0xFE	; 254
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
     a6a:	9e 89       	ldd	r25, Y+22	; 0x16
     a6c:	80 91 20 02 	lds	r24, 0x0220
     a70:	89 17       	cp	r24, r25
     a72:	10 f4       	brcc	.+4      	; 0xa78 <xTaskRemoveFromUnorderedEventList+0x32>
     a74:	90 93 20 02 	sts	0x0220, r25
     a78:	89 e0       	ldi	r24, 0x09	; 9
     a7a:	98 9f       	mul	r25, r24
     a7c:	c0 01       	movw	r24, r0
     a7e:	11 24       	eor	r1, r1
     a80:	82 5d       	subi	r24, 0xD2	; 210
     a82:	9d 4f       	sbci	r25, 0xFD	; 253
     a84:	b8 01       	movw	r22, r16
     a86:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     a8a:	e0 91 1d 02 	lds	r30, 0x021D
     a8e:	f0 91 1e 02 	lds	r31, 0x021E
     a92:	9e 89       	ldd	r25, Y+22	; 0x16
     a94:	86 89       	ldd	r24, Z+22	; 0x16
     a96:	89 17       	cp	r24, r25
     a98:	10 f0       	brcs	.+4      	; 0xa9e <xTaskRemoveFromUnorderedEventList+0x58>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <xTaskRemoveFromUnorderedEventList+0x5e>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 21 02 	sts	0x0221, r24
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     ab6:	dc 01       	movw	r26, r24
     ab8:	15 96       	adiw	r26, 0x05	; 5
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	16 97       	sbiw	r26, 0x06	; 6
     ac0:	c6 81       	ldd	r28, Z+6	; 0x06
     ac2:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     ac4:	8e 01       	movw	r16, r28
     ac6:	04 5f       	subi	r16, 0xF4	; 244
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	c8 01       	movw	r24, r16
     acc:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     ad0:	80 91 1f 02 	lds	r24, 0x021F
     ad4:	88 23       	and	r24, r24
     ad6:	a1 f4       	brne	.+40     	; 0xb00 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     ad8:	8e 01       	movw	r16, r28
     ada:	0e 5f       	subi	r16, 0xFE	; 254
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
     ae4:	9e 89       	ldd	r25, Y+22	; 0x16
     ae6:	80 91 20 02 	lds	r24, 0x0220
     aea:	89 17       	cp	r24, r25
     aec:	10 f4       	brcc	.+4      	; 0xaf2 <xTaskRemoveFromEventList+0x44>
     aee:	90 93 20 02 	sts	0x0220, r25
     af2:	89 e0       	ldi	r24, 0x09	; 9
     af4:	98 9f       	mul	r25, r24
     af6:	c0 01       	movw	r24, r0
     af8:	11 24       	eor	r1, r1
     afa:	82 5d       	subi	r24, 0xD2	; 210
     afc:	9d 4f       	sbci	r25, 0xFD	; 253
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <xTaskRemoveFromEventList+0x56>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     b00:	88 e6       	ldi	r24, 0x68	; 104
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	b8 01       	movw	r22, r16
     b06:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     b0a:	e0 91 1d 02 	lds	r30, 0x021D
     b0e:	f0 91 1e 02 	lds	r31, 0x021E
     b12:	9e 89       	ldd	r25, Y+22	; 0x16
     b14:	86 89       	ldd	r24, Z+22	; 0x16
     b16:	89 17       	cp	r24, r25
     b18:	10 f0       	brcs	.+4      	; 0xb1e <xTaskRemoveFromEventList+0x70>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <xTaskRemoveFromEventList+0x76>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 21 02 	sts	0x0221, r24
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     b3e:	80 91 1f 02 	lds	r24, 0x021F
     b42:	88 23       	and	r24, r24
     b44:	09 f0       	breq	.+2      	; 0xb48 <xTaskIncrementTick+0x1a>
     b46:	a6 c0       	rjmp	.+332    	; 0xc94 <xTaskIncrementTick+0x166>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
     b48:	00 91 22 02 	lds	r16, 0x0222
     b4c:	10 91 23 02 	lds	r17, 0x0223
     b50:	0f 5f       	subi	r16, 0xFF	; 255
     b52:	1f 4f       	sbci	r17, 0xFF	; 255

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     b54:	10 93 23 02 	sts	0x0223, r17
     b58:	00 93 22 02 	sts	0x0222, r16

		if( xConstTickCount == ( TickType_t ) 0U )
     b5c:	01 15       	cp	r16, r1
     b5e:	11 05       	cpc	r17, r1
     b60:	79 f5       	brne	.+94     	; 0xbc0 <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
     b62:	20 91 64 02 	lds	r18, 0x0264
     b66:	30 91 65 02 	lds	r19, 0x0265
     b6a:	80 91 66 02 	lds	r24, 0x0266
     b6e:	90 91 67 02 	lds	r25, 0x0267
     b72:	90 93 65 02 	sts	0x0265, r25
     b76:	80 93 64 02 	sts	0x0264, r24
     b7a:	30 93 67 02 	sts	0x0267, r19
     b7e:	20 93 66 02 	sts	0x0266, r18
     b82:	80 91 26 02 	lds	r24, 0x0226
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	80 93 26 02 	sts	0x0226, r24

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     b8c:	e0 91 64 02 	lds	r30, 0x0264
     b90:	f0 91 65 02 	lds	r31, 0x0265
     b94:	80 81       	ld	r24, Z
     b96:	88 23       	and	r24, r24
     b98:	19 f4       	brne	.+6      	; 0xba0 <xTaskIncrementTick+0x72>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	9f ef       	ldi	r25, 0xFF	; 255
     b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <xTaskIncrementTick+0x8a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     ba0:	e0 91 64 02 	lds	r30, 0x0264
     ba4:	f0 91 65 02 	lds	r31, 0x0265
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     ba8:	05 80       	ldd	r0, Z+5	; 0x05
     baa:	f6 81       	ldd	r31, Z+6	; 0x06
     bac:	e0 2d       	mov	r30, r0
     bae:	06 80       	ldd	r0, Z+6	; 0x06
     bb0:	f7 81       	ldd	r31, Z+7	; 0x07
     bb2:	e0 2d       	mov	r30, r0
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	90 93 25 02 	sts	0x0225, r25
     bbc:	80 93 24 02 	sts	0x0224, r24

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     bc0:	80 91 24 02 	lds	r24, 0x0224
     bc4:	90 91 25 02 	lds	r25, 0x0225
     bc8:	08 17       	cp	r16, r24
     bca:	19 07       	cpc	r17, r25
     bcc:	08 f4       	brcc	.+2      	; 0xbd0 <xTaskIncrementTick+0xa2>
     bce:	4b c0       	rjmp	.+150    	; 0xc66 <xTaskIncrementTick+0x138>
     bd0:	dd 24       	eor	r13, r13
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     bd2:	49 e0       	ldi	r20, 0x09	; 9
     bd4:	c4 2e       	mov	r12, r20
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     bd6:	e0 91 64 02 	lds	r30, 0x0264
     bda:	f0 91 65 02 	lds	r31, 0x0265
     bde:	80 81       	ld	r24, Z
     be0:	88 23       	and	r24, r24
     be2:	19 f4       	brne	.+6      	; 0xbea <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f ef       	ldi	r25, 0xFF	; 255
     be8:	0e c0       	rjmp	.+28     	; 0xc06 <xTaskIncrementTick+0xd8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     bea:	e0 91 64 02 	lds	r30, 0x0264
     bee:	f0 91 65 02 	lds	r31, 0x0265
     bf2:	05 80       	ldd	r0, Z+5	; 0x05
     bf4:	f6 81       	ldd	r31, Z+6	; 0x06
     bf6:	e0 2d       	mov	r30, r0
     bf8:	c6 81       	ldd	r28, Z+6	; 0x06
     bfa:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
     c00:	08 17       	cp	r16, r24
     c02:	19 07       	cpc	r17, r25
     c04:	28 f4       	brcc	.+10     	; 0xc10 <xTaskIncrementTick+0xe2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     c06:	90 93 25 02 	sts	0x0225, r25
     c0a:	80 93 24 02 	sts	0x0224, r24
     c0e:	2c c0       	rjmp	.+88     	; 0xc68 <xTaskIncrementTick+0x13a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     c10:	32 e0       	ldi	r19, 0x02	; 2
     c12:	e3 2e       	mov	r14, r19
     c14:	f1 2c       	mov	r15, r1
     c16:	ec 0e       	add	r14, r28
     c18:	fd 1e       	adc	r15, r29
     c1a:	c7 01       	movw	r24, r14
     c1c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     c20:	8c 89       	ldd	r24, Y+20	; 0x14
     c22:	9d 89       	ldd	r25, Y+21	; 0x15
     c24:	89 2b       	or	r24, r25
     c26:	21 f0       	breq	.+8      	; 0xc30 <xTaskIncrementTick+0x102>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     c28:	ce 01       	movw	r24, r28
     c2a:	0c 96       	adiw	r24, 0x0c	; 12
     c2c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     c30:	9e 89       	ldd	r25, Y+22	; 0x16
     c32:	80 91 20 02 	lds	r24, 0x0220
     c36:	89 17       	cp	r24, r25
     c38:	10 f4       	brcc	.+4      	; 0xc3e <xTaskIncrementTick+0x110>
     c3a:	90 93 20 02 	sts	0x0220, r25
     c3e:	9c 9d       	mul	r25, r12
     c40:	c0 01       	movw	r24, r0
     c42:	11 24       	eor	r1, r1
     c44:	82 5d       	subi	r24, 0xD2	; 210
     c46:	9d 4f       	sbci	r25, 0xFD	; 253
     c48:	b7 01       	movw	r22, r14
     c4a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     c4e:	e0 91 1d 02 	lds	r30, 0x021D
     c52:	f0 91 1e 02 	lds	r31, 0x021E
     c56:	9e 89       	ldd	r25, Y+22	; 0x16
     c58:	86 89       	ldd	r24, Z+22	; 0x16
     c5a:	98 17       	cp	r25, r24
     c5c:	08 f4       	brcc	.+2      	; 0xc60 <xTaskIncrementTick+0x132>
     c5e:	bb cf       	rjmp	.-138    	; 0xbd6 <xTaskIncrementTick+0xa8>
     c60:	dd 24       	eor	r13, r13
     c62:	d3 94       	inc	r13
     c64:	b8 cf       	rjmp	.-144    	; 0xbd6 <xTaskIncrementTick+0xa8>
     c66:	dd 24       	eor	r13, r13
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     c68:	e0 91 1d 02 	lds	r30, 0x021D
     c6c:	f0 91 1e 02 	lds	r31, 0x021E
     c70:	86 89       	ldd	r24, Z+22	; 0x16
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	fc 01       	movw	r30, r24
     c76:	23 e0       	ldi	r18, 0x03	; 3
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	2a 95       	dec	r18
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <xTaskIncrementTick+0x14a>
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	e2 5d       	subi	r30, 0xD2	; 210
     c86:	fd 4f       	sbci	r31, 0xFD	; 253
     c88:	80 81       	ld	r24, Z
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	48 f0       	brcs	.+18     	; 0xca0 <xTaskIncrementTick+0x172>
     c8e:	dd 24       	eor	r13, r13
     c90:	d3 94       	inc	r13
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <xTaskIncrementTick+0x172>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     c94:	80 91 27 02 	lds	r24, 0x0227
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	80 93 27 02 	sts	0x0227, r24
     c9e:	dd 24       	eor	r13, r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     ca0:	80 91 21 02 	lds	r24, 0x0221
     ca4:	88 23       	and	r24, r24
     ca6:	11 f0       	breq	.+4      	; 0xcac <xTaskIncrementTick+0x17e>
     ca8:	dd 24       	eor	r13, r13
     caa:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     cac:	8d 2d       	mov	r24, r13
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	df 90       	pop	r13
     cbc:	cf 90       	pop	r12
     cbe:	08 95       	ret

00000cc0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	f8 01       	movw	r30, r16
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
     cca:	ec 01       	movw	r28, r24

		taskENTER_CRITICAL();
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
     cd2:	01 15       	cp	r16, r1
     cd4:	11 05       	cpc	r17, r1
     cd6:	41 f0       	breq	.+16     	; 0xce8 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     cd8:	89 a1       	ldd	r24, Y+33	; 0x21
     cda:	9a a1       	ldd	r25, Y+34	; 0x22
     cdc:	ab a1       	ldd	r26, Y+35	; 0x23
     cde:	bc a1       	ldd	r27, Y+36	; 0x24
     ce0:	80 83       	st	Z, r24
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	a2 83       	std	Z+2, r26	; 0x02
     ce6:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     ce8:	3d a1       	ldd	r19, Y+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	99 f0       	breq	.+38     	; 0xd18 <xTaskGenericNotify+0x58>
     cf2:	23 30       	cpi	r18, 0x03	; 3
     cf4:	18 f4       	brcc	.+6      	; 0xcfc <xTaskGenericNotify+0x3c>
     cf6:	21 30       	cpi	r18, 0x01	; 1
     cf8:	19 f5       	brne	.+70     	; 0xd40 <xTaskGenericNotify+0x80>
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <xTaskGenericNotify+0x46>
     cfc:	23 30       	cpi	r18, 0x03	; 3
     cfe:	e1 f0       	breq	.+56     	; 0xd38 <xTaskGenericNotify+0x78>
     d00:	24 30       	cpi	r18, 0x04	; 4
     d02:	f1 f4       	brne	.+60     	; 0xd40 <xTaskGenericNotify+0x80>
     d04:	15 c0       	rjmp	.+42     	; 0xd30 <xTaskGenericNotify+0x70>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     d06:	89 a1       	ldd	r24, Y+33	; 0x21
     d08:	9a a1       	ldd	r25, Y+34	; 0x22
     d0a:	ab a1       	ldd	r26, Y+35	; 0x23
     d0c:	bc a1       	ldd	r27, Y+36	; 0x24
     d0e:	84 2b       	or	r24, r20
     d10:	95 2b       	or	r25, r21
     d12:	a6 2b       	or	r26, r22
     d14:	b7 2b       	or	r27, r23
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <xTaskGenericNotify+0x66>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     d18:	89 a1       	ldd	r24, Y+33	; 0x21
     d1a:	9a a1       	ldd	r25, Y+34	; 0x22
     d1c:	ab a1       	ldd	r26, Y+35	; 0x23
     d1e:	bc a1       	ldd	r27, Y+36	; 0x24
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	a1 1d       	adc	r26, r1
     d24:	b1 1d       	adc	r27, r1
     d26:	89 a3       	std	Y+33, r24	; 0x21
     d28:	9a a3       	std	Y+34, r25	; 0x22
     d2a:	ab a3       	std	Y+35, r26	; 0x23
     d2c:	bc a3       	std	Y+36, r27	; 0x24
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <xTaskGenericNotify+0x80>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     d30:	32 30       	cpi	r19, 0x02	; 2
     d32:	11 f4       	brne	.+4      	; 0xd38 <xTaskGenericNotify+0x78>
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	27 c0       	rjmp	.+78     	; 0xd86 <xTaskGenericNotify+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
     d38:	49 a3       	std	Y+33, r20	; 0x21
     d3a:	5a a3       	std	Y+34, r21	; 0x22
     d3c:	6b a3       	std	Y+35, r22	; 0x23
     d3e:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     d40:	31 30       	cpi	r19, 0x01	; 1
     d42:	01 f5       	brne	.+64     	; 0xd84 <xTaskGenericNotify+0xc4>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     d44:	8e 01       	movw	r16, r28
     d46:	0e 5f       	subi	r16, 0xFE	; 254
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	c8 01       	movw	r24, r16
     d4c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
     d50:	9e 89       	ldd	r25, Y+22	; 0x16
     d52:	80 91 20 02 	lds	r24, 0x0220
     d56:	89 17       	cp	r24, r25
     d58:	10 f4       	brcc	.+4      	; 0xd5e <xTaskGenericNotify+0x9e>
     d5a:	90 93 20 02 	sts	0x0220, r25
     d5e:	89 e0       	ldi	r24, 0x09	; 9
     d60:	98 9f       	mul	r25, r24
     d62:	c0 01       	movw	r24, r0
     d64:	11 24       	eor	r1, r1
     d66:	82 5d       	subi	r24, 0xD2	; 210
     d68:	9d 4f       	sbci	r25, 0xFD	; 253
     d6a:	b8 01       	movw	r22, r16
     d6c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     d70:	e0 91 1d 02 	lds	r30, 0x021D
     d74:	f0 91 1e 02 	lds	r31, 0x021E
     d78:	9e 89       	ldd	r25, Y+22	; 0x16
     d7a:	86 89       	ldd	r24, Z+22	; 0x16
     d7c:	89 17       	cp	r24, r25
     d7e:	10 f4       	brcc	.+4      	; 0xd84 <xTaskGenericNotify+0xc4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
     d80:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
     d84:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     da6:	80 91 1f 02 	lds	r24, 0x021F
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	80 93 1f 02 	sts	0x021F, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     db0:	80 91 1f 02 	lds	r24, 0x021F
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <xTaskResumeAll+0x26>
     db8:	6c c0       	rjmp	.+216    	; 0xe92 <xTaskResumeAll+0xfe>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     dba:	80 91 28 02 	lds	r24, 0x0228
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <xTaskResumeAll+0x30>
     dc2:	67 c0       	rjmp	.+206    	; 0xe92 <xTaskResumeAll+0xfe>
     dc4:	c0 e0       	ldi	r28, 0x00	; 0
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
     dc8:	59 e0       	ldi	r21, 0x09	; 9
     dca:	e5 2e       	mov	r14, r21

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
     dcc:	ff 24       	eor	r15, r15
     dce:	f3 94       	inc	r15
     dd0:	29 c0       	rjmp	.+82     	; 0xe24 <xTaskResumeAll+0x90>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     dd2:	e0 91 6d 02 	lds	r30, 0x026D
     dd6:	f0 91 6e 02 	lds	r31, 0x026E
     dda:	c6 81       	ldd	r28, Z+6	; 0x06
     ddc:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     dde:	ce 01       	movw	r24, r28
     de0:	0c 96       	adiw	r24, 0x0c	; 12
     de2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     de6:	8e 01       	movw	r16, r28
     de8:	0e 5f       	subi	r16, 0xFE	; 254
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	c8 01       	movw	r24, r16
     dee:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     df2:	9e 89       	ldd	r25, Y+22	; 0x16
     df4:	80 91 20 02 	lds	r24, 0x0220
     df8:	89 17       	cp	r24, r25
     dfa:	10 f4       	brcc	.+4      	; 0xe00 <xTaskResumeAll+0x6c>
     dfc:	90 93 20 02 	sts	0x0220, r25
     e00:	9e 9d       	mul	r25, r14
     e02:	c0 01       	movw	r24, r0
     e04:	11 24       	eor	r1, r1
     e06:	82 5d       	subi	r24, 0xD2	; 210
     e08:	9d 4f       	sbci	r25, 0xFD	; 253
     e0a:	b8 01       	movw	r22, r16
     e0c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     e10:	e0 91 1d 02 	lds	r30, 0x021D
     e14:	f0 91 1e 02 	lds	r31, 0x021E
     e18:	9e 89       	ldd	r25, Y+22	; 0x16
     e1a:	86 89       	ldd	r24, Z+22	; 0x16
     e1c:	98 17       	cp	r25, r24
     e1e:	10 f0       	brcs	.+4      	; 0xe24 <xTaskResumeAll+0x90>
					{
						xYieldPending = pdTRUE;
     e20:	f0 92 21 02 	sts	0x0221, r15
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     e24:	80 91 68 02 	lds	r24, 0x0268
     e28:	88 23       	and	r24, r24
     e2a:	99 f6       	brne	.-90     	; 0xdd2 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     e2c:	cd 2b       	or	r28, r29
     e2e:	d1 f0       	breq	.+52     	; 0xe64 <xTaskResumeAll+0xd0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e30:	e0 91 64 02 	lds	r30, 0x0264
     e34:	f0 91 65 02 	lds	r31, 0x0265
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	19 f4       	brne	.+6      	; 0xe44 <xTaskResumeAll+0xb0>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	0c c0       	rjmp	.+24     	; 0xe5c <xTaskResumeAll+0xc8>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     e44:	e0 91 64 02 	lds	r30, 0x0264
     e48:	f0 91 65 02 	lds	r31, 0x0265
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e4c:	05 80       	ldd	r0, Z+5	; 0x05
     e4e:	f6 81       	ldd	r31, Z+6	; 0x06
     e50:	e0 2d       	mov	r30, r0
     e52:	06 80       	ldd	r0, Z+6	; 0x06
     e54:	f7 81       	ldd	r31, Z+7	; 0x07
     e56:	e0 2d       	mov	r30, r0
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	90 93 25 02 	sts	0x0225, r25
     e60:	80 93 24 02 	sts	0x0224, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     e64:	10 91 27 02 	lds	r17, 0x0227

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     e68:	11 23       	and	r17, r17
     e6a:	59 f0       	breq	.+22     	; 0xe82 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
     e6c:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     e6e:	0e 94 97 05 	call	0xb2e	; 0xb2e <xTaskIncrementTick>
     e72:	88 23       	and	r24, r24
     e74:	11 f0       	breq	.+4      	; 0xe7a <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
     e76:	00 93 21 02 	sts	0x0221, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     e7a:	11 50       	subi	r17, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     e7c:	c1 f7       	brne	.-16     	; 0xe6e <xTaskResumeAll+0xda>

						uxPendedTicks = 0;
     e7e:	10 92 27 02 	sts	0x0227, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     e82:	80 91 21 02 	lds	r24, 0x0221
     e86:	88 23       	and	r24, r24
     e88:	21 f0       	breq	.+8      	; 0xe92 <xTaskResumeAll+0xfe>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     e8a:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <xTaskResumeAll+0x100>
     e92:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     eb0:	00 91 22 02 	lds	r16, 0x0222
     eb4:	10 91 23 02 	lds	r17, 0x0223
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     eb8:	80 91 1d 02 	lds	r24, 0x021D
     ebc:	90 91 1e 02 	lds	r25, 0x021E
     ec0:	02 96       	adiw	r24, 0x02	; 2
     ec2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
     ec6:	c0 0f       	add	r28, r16
     ec8:	d1 1f       	adc	r29, r17

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     eca:	e0 91 1d 02 	lds	r30, 0x021D
     ece:	f0 91 1e 02 	lds	r31, 0x021E
     ed2:	d3 83       	std	Z+3, r29	; 0x03
     ed4:	c2 83       	std	Z+2, r28	; 0x02

		if( xTimeToWake < xConstTickCount )
     ed6:	c0 17       	cp	r28, r16
     ed8:	d1 07       	cpc	r29, r17
     eda:	68 f4       	brcc	.+26     	; 0xef6 <prvAddCurrentTaskToDelayedList+0x50>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     edc:	80 91 66 02 	lds	r24, 0x0266
     ee0:	90 91 67 02 	lds	r25, 0x0267
     ee4:	60 91 1d 02 	lds	r22, 0x021D
     ee8:	70 91 1e 02 	lds	r23, 0x021E
     eec:	6e 5f       	subi	r22, 0xFE	; 254
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vListInsert>
     ef4:	17 c0       	rjmp	.+46     	; 0xf24 <prvAddCurrentTaskToDelayedList+0x7e>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     ef6:	80 91 64 02 	lds	r24, 0x0264
     efa:	90 91 65 02 	lds	r25, 0x0265
     efe:	60 91 1d 02 	lds	r22, 0x021D
     f02:	70 91 1e 02 	lds	r23, 0x021E
     f06:	6e 5f       	subi	r22, 0xFE	; 254
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
     f0e:	80 91 24 02 	lds	r24, 0x0224
     f12:	90 91 25 02 	lds	r25, 0x0225
     f16:	c8 17       	cp	r28, r24
     f18:	d9 07       	cpc	r29, r25
     f1a:	20 f4       	brcc	.+8      	; 0xf24 <prvAddCurrentTaskToDelayedList+0x7e>
			{
				xNextTaskUnblockTime = xTimeToWake;
     f1c:	d0 93 25 02 	sts	0x0225, r29
     f20:	c0 93 24 02 	sts	0x0224, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	5b 01       	movw	r10, r22
     f4c:	6c 01       	movw	r12, r24
     f4e:	39 01       	movw	r6, r18
     f50:	4a 01       	movw	r8, r20
     f52:	e8 01       	movw	r28, r16
	BaseType_t xReturn;

		taskENTER_CRITICAL();
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
     f5a:	e0 91 1d 02 	lds	r30, 0x021D
     f5e:	f0 91 1e 02 	lds	r31, 0x021E
     f62:	85 a1       	ldd	r24, Z+37	; 0x25
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	19 f1       	breq	.+70     	; 0xfae <xTaskNotifyWait+0x80>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
     f68:	e0 91 1d 02 	lds	r30, 0x021D
     f6c:	f0 91 1e 02 	lds	r31, 0x021E
     f70:	81 a1       	ldd	r24, Z+33	; 0x21
     f72:	92 a1       	ldd	r25, Z+34	; 0x22
     f74:	a3 a1       	ldd	r26, Z+35	; 0x23
     f76:	b4 a1       	ldd	r27, Z+36	; 0x24
     f78:	a0 94       	com	r10
     f7a:	b0 94       	com	r11
     f7c:	c0 94       	com	r12
     f7e:	d0 94       	com	r13
     f80:	8a 21       	and	r24, r10
     f82:	9b 21       	and	r25, r11
     f84:	ac 21       	and	r26, r12
     f86:	bd 21       	and	r27, r13
     f88:	81 a3       	std	Z+33, r24	; 0x21
     f8a:	92 a3       	std	Z+34, r25	; 0x22
     f8c:	a3 a3       	std	Z+35, r26	; 0x23
     f8e:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
     f90:	e0 91 1d 02 	lds	r30, 0x021D
     f94:	f0 91 1e 02 	lds	r31, 0x021E
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
     f9c:	e1 14       	cp	r14, r1
     f9e:	f1 04       	cpc	r15, r1
     fa0:	31 f0       	breq	.+12     	; 0xfae <xTaskNotifyWait+0x80>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
     fa2:	c7 01       	movw	r24, r14
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
     faa:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
     fb8:	20 97       	sbiw	r28, 0x00	; 0
     fba:	61 f0       	breq	.+24     	; 0xfd4 <xTaskNotifyWait+0xa6>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
     fbc:	e0 91 1d 02 	lds	r30, 0x021D
     fc0:	f0 91 1e 02 	lds	r31, 0x021E
     fc4:	81 a1       	ldd	r24, Z+33	; 0x21
     fc6:	92 a1       	ldd	r25, Z+34	; 0x22
     fc8:	a3 a1       	ldd	r26, Z+35	; 0x23
     fca:	b4 a1       	ldd	r27, Z+36	; 0x24
     fcc:	88 83       	st	Y, r24
     fce:	99 83       	std	Y+1, r25	; 0x01
     fd0:	aa 83       	std	Y+2, r26	; 0x02
     fd2:	bb 83       	std	Y+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
     fd4:	e0 91 1d 02 	lds	r30, 0x021D
     fd8:	f0 91 1e 02 	lds	r31, 0x021E
     fdc:	85 a1       	ldd	r24, Z+37	; 0x25
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <xTaskNotifyWait+0xb8>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	15 c0       	rjmp	.+42     	; 0x1010 <xTaskNotifyWait+0xe2>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
     fe6:	e0 91 1d 02 	lds	r30, 0x021D
     fea:	f0 91 1e 02 	lds	r31, 0x021E
     fee:	81 a1       	ldd	r24, Z+33	; 0x21
     ff0:	92 a1       	ldd	r25, Z+34	; 0x22
     ff2:	a3 a1       	ldd	r26, Z+35	; 0x23
     ff4:	b4 a1       	ldd	r27, Z+36	; 0x24
     ff6:	60 94       	com	r6
     ff8:	70 94       	com	r7
     ffa:	80 94       	com	r8
     ffc:	90 94       	com	r9
     ffe:	86 21       	and	r24, r6
    1000:	97 21       	and	r25, r7
    1002:	a8 21       	and	r26, r8
    1004:	b9 21       	and	r27, r9
    1006:	81 a3       	std	Z+33, r24	; 0x21
    1008:	92 a3       	std	Z+34, r25	; 0x22
    100a:	a3 a3       	std	Z+35, r26	; 0x23
    100c:	b4 a3       	std	Z+36, r27	; 0x24
    100e:	81 e0       	ldi	r24, 0x01	; 1
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1010:	e0 91 1d 02 	lds	r30, 0x021D
    1014:	f0 91 1e 02 	lds	r31, 0x021E
    1018:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    101a:	0f 90       	pop	r0
    101c:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	08 95       	ret

0000103c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    103c:	1f 93       	push	r17
    103e:	18 2f       	mov	r17, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    1046:	e0 91 1d 02 	lds	r30, 0x021D
    104a:	f0 91 1e 02 	lds	r31, 0x021E
    104e:	81 a1       	ldd	r24, Z+33	; 0x21
    1050:	92 a1       	ldd	r25, Z+34	; 0x22
    1052:	a3 a1       	ldd	r26, Z+35	; 0x23
    1054:	b4 a1       	ldd	r27, Z+36	; 0x24
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	a1 05       	cpc	r26, r1
    105a:	b1 05       	cpc	r27, r1
    105c:	79 f4       	brne	.+30     	; 0x107c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    105e:	e0 91 1d 02 	lds	r30, 0x021D
    1062:	f0 91 1e 02 	lds	r31, 0x021E
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    106a:	61 15       	cp	r22, r1
    106c:	71 05       	cpc	r23, r1
    106e:	31 f0       	breq	.+12     	; 0x107c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1070:	cb 01       	movw	r24, r22
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1078:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    1086:	e0 91 1d 02 	lds	r30, 0x021D
    108a:	f0 91 1e 02 	lds	r31, 0x021E
    108e:	21 a1       	ldd	r18, Z+33	; 0x21
    1090:	32 a1       	ldd	r19, Z+34	; 0x22
    1092:	43 a1       	ldd	r20, Z+35	; 0x23
    1094:	54 a1       	ldd	r21, Z+36	; 0x24

			if( ulReturn != 0UL )
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	41 05       	cpc	r20, r1
    109c:	51 05       	cpc	r21, r1
    109e:	d9 f0       	breq	.+54     	; 0x10d6 <ulTaskNotifyTake+0x9a>
			{
				if( xClearCountOnExit != pdFALSE )
    10a0:	11 23       	and	r17, r17
    10a2:	49 f0       	breq	.+18     	; 0x10b6 <ulTaskNotifyTake+0x7a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    10a4:	e0 91 1d 02 	lds	r30, 0x021D
    10a8:	f0 91 1e 02 	lds	r31, 0x021E
    10ac:	11 a2       	std	Z+33, r1	; 0x21
    10ae:	12 a2       	std	Z+34, r1	; 0x22
    10b0:	13 a2       	std	Z+35, r1	; 0x23
    10b2:	14 a2       	std	Z+36, r1	; 0x24
    10b4:	10 c0       	rjmp	.+32     	; 0x10d6 <ulTaskNotifyTake+0x9a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    10b6:	e0 91 1d 02 	lds	r30, 0x021D
    10ba:	f0 91 1e 02 	lds	r31, 0x021E
    10be:	21 50       	subi	r18, 0x01	; 1
    10c0:	30 40       	sbci	r19, 0x00	; 0
    10c2:	40 40       	sbci	r20, 0x00	; 0
    10c4:	50 40       	sbci	r21, 0x00	; 0
    10c6:	21 a3       	std	Z+33, r18	; 0x21
    10c8:	32 a3       	std	Z+34, r19	; 0x22
    10ca:	43 a3       	std	Z+35, r20	; 0x23
    10cc:	54 a3       	std	Z+36, r21	; 0x24
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	4f 4f       	sbci	r20, 0xFF	; 255
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    10d6:	e0 91 1d 02 	lds	r30, 0x021D
    10da:	f0 91 1e 02 	lds	r31, 0x021E
    10de:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    10e4:	b9 01       	movw	r22, r18
    10e6:	ca 01       	movw	r24, r20
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	8a 01       	movw	r16, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    10f2:	e0 91 1d 02 	lds	r30, 0x021D
    10f6:	f0 91 1e 02 	lds	r31, 0x021E
    10fa:	70 68       	ori	r23, 0x80	; 128
    10fc:	75 87       	std	Z+13, r23	; 0x0d
    10fe:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1100:	60 91 1d 02 	lds	r22, 0x021D
    1104:	70 91 1e 02 	lds	r23, 0x021E
    1108:	64 5f       	subi	r22, 0xF4	; 244
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1110:	c8 01       	movw	r24, r16
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>
}
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    111e:	9c 01       	movw	r18, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f0       	breq	.+26     	; 0x113e <vTaskDelay+0x20>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1124:	80 91 1f 02 	lds	r24, 0x021F
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	80 93 1f 02 	sts	0x021F, r24
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    112e:	c9 01       	movw	r24, r18
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1136:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    113a:	88 23       	and	r24, r24
    113c:	11 f4       	brne	.+4      	; 0x1142 <vTaskDelay+0x24>
		{
			portYIELD_WITHIN_API();
    113e:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    1142:	08 95       	ret

00001144 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1144:	fc 01       	movw	r30, r24
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1146:	80 91 1f 02 	lds	r24, 0x021F
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	80 93 1f 02 	sts	0x021F, r24

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1150:	40 91 22 02 	lds	r20, 0x0222
    1154:	50 91 23 02 	lds	r21, 0x0223

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1158:	20 81       	ld	r18, Z
    115a:	31 81       	ldd	r19, Z+1	; 0x01
    115c:	62 0f       	add	r22, r18
    115e:	73 1f       	adc	r23, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1160:	42 17       	cp	r20, r18
    1162:	53 07       	cpc	r21, r19
    1164:	28 f4       	brcc	.+10     	; 0x1170 <vTaskDelayUntil+0x2c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    1166:	62 17       	cp	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	28 f0       	brcs	.+10     	; 0x1176 <vTaskDelayUntil+0x32>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <vTaskDelayUntil+0x3c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1170:	62 17       	cp	r22, r18
    1172:	73 07       	cpc	r23, r19
    1174:	20 f0       	brcs	.+8      	; 0x117e <vTaskDelayUntil+0x3a>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	46 17       	cp	r20, r22
    117a:	57 07       	cpc	r21, r23
    117c:	08 f4       	brcc	.+2      	; 0x1180 <vTaskDelayUntil+0x3c>
    117e:	81 e0       	ldi	r24, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1180:	71 83       	std	Z+1, r23	; 0x01
    1182:	60 83       	st	Z, r22

			if( xShouldDelay != pdFALSE )
    1184:	88 23       	and	r24, r24
    1186:	31 f0       	breq	.+12     	; 0x1194 <vTaskDelayUntil+0x50>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    1188:	cb 01       	movw	r24, r22
    118a:	84 1b       	sub	r24, r20
    118c:	95 0b       	sbc	r25, r21
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1194:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1198:	88 23       	and	r24, r24
    119a:	11 f4       	brne	.+4      	; 0x11a0 <vTaskDelayUntil+0x5c>
		{
			portYIELD_WITHIN_API();
    119c:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    11a0:	08 95       	ret

000011a2 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	8b 01       	movw	r16, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    11a8:	60 91 1d 02 	lds	r22, 0x021D
    11ac:	70 91 1e 02 	lds	r23, 0x021E
    11b0:	64 5f       	subi	r22, 0xF4	; 244
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    11b8:	c8 01       	movw	r24, r16
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	0e 94 53 07 	call	0xea6	; 0xea6 <prvAddCurrentTaskToDelayedList>
}
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    11c6:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    11c8:	10 92 29 02 	sts	0x0229, r1
	vPortEndScheduler();
    11cc:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <vPortEndScheduler>
}
    11d0:	08 95       	ret

000011d2 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	2c c0       	rjmp	.+88     	; 0x1230 <prvIdleTask+0x5e>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    11d8:	80 91 1f 02 	lds	r24, 0x021F
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 1f 02 	sts	0x021F, r24
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11e2:	10 91 71 02 	lds	r17, 0x0271
			}
			( void ) xTaskResumeAll();
    11e6:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    11ea:	11 23       	and	r17, r17
    11ec:	09 f1       	breq	.+66     	; 0x1230 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    11f4:	e0 91 76 02 	lds	r30, 0x0276
    11f8:	f0 91 77 02 	lds	r31, 0x0277
    11fc:	06 81       	ldd	r16, Z+6	; 0x06
    11fe:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1200:	c8 01       	movw	r24, r16
    1202:	02 96       	adiw	r24, 0x02	; 2
    1204:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
					--uxCurrentNumberOfTasks;
    1208:	80 91 28 02 	lds	r24, 0x0228
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	80 93 28 02 	sts	0x0228, r24
					--uxDeletedTasksWaitingCleanUp;
    1212:	80 91 2c 02 	lds	r24, 0x022C
    1216:	81 50       	subi	r24, 0x01	; 1
    1218:	80 93 2c 02 	sts	0x022C, r24
				}
				taskEXIT_CRITICAL();
    121c:	0f 90       	pop	r0
    121e:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1220:	f8 01       	movw	r30, r16
    1222:	87 89       	ldd	r24, Z+23	; 0x17
    1224:	90 8d       	ldd	r25, Z+24	; 0x18
    1226:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>
			vPortFree( pxTCB );
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1230:	80 91 2c 02 	lds	r24, 0x022C
    1234:	88 23       	and	r24, r24
    1236:	81 f6       	brne	.-96     	; 0x11d8 <prvIdleTask+0x6>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1238:	80 91 2e 02 	lds	r24, 0x022E
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	10 f0       	brcs	.+4      	; 0x1244 <prvIdleTask+0x72>
			{
				taskYIELD();
    1240:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1244:	0e 94 ab 00 	call	0x156	; 0x156 <vApplicationIdleHook>
    1248:	f3 cf       	rjmp	.-26     	; 0x1230 <prvIdleTask+0x5e>

0000124a <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	29 f4       	brne	.+10     	; 0x1266 <vTaskDelete+0x1c>
    125c:	c0 91 1d 02 	lds	r28, 0x021D
    1260:	d0 91 1e 02 	lds	r29, 0x021E
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <vTaskDelete+0x1e>
    1266:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1268:	8e 01       	movw	r16, r28
    126a:	0e 5f       	subi	r16, 0xFE	; 254
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	c8 01       	movw	r24, r16
    1270:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1274:	8c 89       	ldd	r24, Y+20	; 0x14
    1276:	9d 89       	ldd	r25, Y+21	; 0x15
    1278:	89 2b       	or	r24, r25
    127a:	21 f0       	breq	.+8      	; 0x1284 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    127c:	ce 01       	movw	r24, r28
    127e:	0c 96       	adiw	r24, 0x0c	; 12
    1280:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1284:	80 91 2d 02 	lds	r24, 0x022D
    1288:	8f 5f       	subi	r24, 0xFF	; 255
    128a:	80 93 2d 02 	sts	0x022D, r24

			if( pxTCB == pxCurrentTCB )
    128e:	80 91 1d 02 	lds	r24, 0x021D
    1292:	90 91 1e 02 	lds	r25, 0x021E
    1296:	c8 17       	cp	r28, r24
    1298:	d9 07       	cpc	r29, r25
    129a:	59 f4       	brne	.+22     	; 0x12b2 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    129c:	81 e7       	ldi	r24, 0x71	; 113
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	b8 01       	movw	r22, r16
    12a2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    12a6:	80 91 2c 02 	lds	r24, 0x022C
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	80 93 2c 02 	sts	0x022C, r24
    12b0:	26 c0       	rjmp	.+76     	; 0x12fe <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    12b2:	80 91 28 02 	lds	r24, 0x0228
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	80 93 28 02 	sts	0x0228, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    12bc:	8f 89       	ldd	r24, Y+23	; 0x17
    12be:	98 8d       	ldd	r25, Y+24	; 0x18
    12c0:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>
			vPortFree( pxTCB );
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    12ca:	e0 91 64 02 	lds	r30, 0x0264
    12ce:	f0 91 65 02 	lds	r31, 0x0265
    12d2:	80 81       	ld	r24, Z
    12d4:	88 23       	and	r24, r24
    12d6:	19 f4       	brne	.+6      	; 0x12de <vTaskDelete+0x94>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <vTaskDelete+0xac>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    12de:	e0 91 64 02 	lds	r30, 0x0264
    12e2:	f0 91 65 02 	lds	r31, 0x0265
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    12e6:	05 80       	ldd	r0, Z+5	; 0x05
    12e8:	f6 81       	ldd	r31, Z+6	; 0x06
    12ea:	e0 2d       	mov	r30, r0
    12ec:	06 80       	ldd	r0, Z+6	; 0x06
    12ee:	f7 81       	ldd	r31, Z+7	; 0x07
    12f0:	e0 2d       	mov	r30, r0
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	90 93 25 02 	sts	0x0225, r25
    12fa:	80 93 24 02 	sts	0x0224, r24
				prvResetNextTaskUnblockTime();
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    12fe:	0f 90       	pop	r0
    1300:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1302:	80 91 29 02 	lds	r24, 0x0229
    1306:	88 23       	and	r24, r24
    1308:	49 f0       	breq	.+18     	; 0x131c <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    130a:	80 91 1d 02 	lds	r24, 0x021D
    130e:	90 91 1e 02 	lds	r25, 0x021E
    1312:	c8 17       	cp	r28, r24
    1314:	d9 07       	cpc	r29, r25
    1316:	11 f4       	brne	.+4      	; 0x131c <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1318:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    1326:	4f 92       	push	r4
    1328:	5f 92       	push	r5
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	2c 01       	movw	r4, r24
    1348:	16 2f       	mov	r17, r22
    134a:	97 2e       	mov	r9, r23
    134c:	6a 01       	movw	r12, r20
    134e:	39 01       	movw	r6, r18
    1350:	57 01       	movw	r10, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1352:	ca 01       	movw	r24, r20
    1354:	0e 94 1e 11 	call	0x223c	; 0x223c <pvPortMalloc>
    1358:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	99 f0       	breq	.+38     	; 0x1384 <xTaskCreate+0x5e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    135e:	86 e2       	ldi	r24, 0x26	; 38
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 1e 11 	call	0x223c	; 0x223c <pvPortMalloc>
    1366:	ec 01       	movw	r28, r24

				if( pxNewTCB != NULL )
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	49 f0       	breq	.+18     	; 0x137e <xTaskCreate+0x58>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    136c:	f8 8e       	std	Y+24, r15	; 0x18
    136e:	ef 8a       	std	Y+23, r14	; 0x17
    1370:	81 2f       	mov	r24, r17
    1372:	99 2d       	mov	r25, r9
    1374:	9c 01       	movw	r18, r24
    1376:	f9 01       	movw	r30, r18
    1378:	de 01       	movw	r26, r28
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <xTaskCreate+0x62>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    137e:	c7 01       	movw	r24, r14
    1380:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	b7 c0       	rjmp	.+366    	; 0x14f6 <xTaskCreate+0x1d0>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1388:	80 81       	ld	r24, Z
    138a:	59 96       	adiw	r26, 0x19	; 25
    138c:	8c 93       	st	X, r24
    138e:	59 97       	sbiw	r26, 0x19	; 25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1390:	80 81       	ld	r24, Z
    1392:	88 23       	and	r24, r24
    1394:	29 f0       	breq	.+10     	; 0x13a0 <xTaskCreate+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	98 30       	cpi	r25, 0x08	; 8
    139e:	a1 f7       	brne	.-24     	; 0x1388 <xTaskCreate+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    13a0:	18 a2       	std	Y+32, r1	; 0x20
    13a2:	04 30       	cpi	r16, 0x04	; 4
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <xTaskCreate+0x82>
    13a6:	03 e0       	ldi	r16, 0x03	; 3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    13a8:	0e 8b       	std	Y+22, r16	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    13aa:	72 e0       	ldi	r23, 0x02	; 2
    13ac:	87 2e       	mov	r8, r23
    13ae:	91 2c       	mov	r9, r1
    13b0:	8c 0e       	add	r8, r28
    13b2:	9d 1e       	adc	r9, r29
    13b4:	c4 01       	movw	r24, r8
    13b6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    13ba:	ce 01       	movw	r24, r28
    13bc:	0c 96       	adiw	r24, 0x0c	; 12
    13be:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    13c2:	d9 87       	std	Y+9, r29	; 0x09
    13c4:	c8 87       	std	Y+8, r28	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13c6:	84 e0       	ldi	r24, 0x04	; 4
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	80 1b       	sub	r24, r16
    13cc:	91 09       	sbc	r25, r1
    13ce:	9d 87       	std	Y+13, r25	; 0x0d
    13d0:	8c 87       	std	Y+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    13d2:	db 8b       	std	Y+19, r29	; 0x13
    13d4:	ca 8b       	std	Y+18, r28	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    13d6:	19 a2       	std	Y+33, r1	; 0x21
    13d8:	1a a2       	std	Y+34, r1	; 0x22
    13da:	1b a2       	std	Y+35, r1	; 0x23
    13dc:	1c a2       	std	Y+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    13de:	1d a2       	std	Y+37, r1	; 0x25
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13e0:	08 94       	sec
    13e2:	c1 08       	sbc	r12, r1
    13e4:	d1 08       	sbc	r13, r1
    13e6:	c7 01       	movw	r24, r14
    13e8:	8c 0d       	add	r24, r12
    13ea:	9d 1d       	adc	r25, r13
    13ec:	b2 01       	movw	r22, r4
    13ee:	a3 01       	movw	r20, r6
    13f0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <pxPortInitialiseStack>
    13f4:	99 83       	std	Y+1, r25	; 0x01
    13f6:	88 83       	st	Y, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    13f8:	a1 14       	cp	r10, r1
    13fa:	b1 04       	cpc	r11, r1
    13fc:	19 f0       	breq	.+6      	; 0x1404 <xTaskCreate+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    13fe:	f5 01       	movw	r30, r10
    1400:	d1 83       	std	Z+1, r29	; 0x01
    1402:	c0 83       	st	Z, r28

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    140a:	80 91 28 02 	lds	r24, 0x0228
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 28 02 	sts	0x0228, r24
		if( pxCurrentTCB == NULL )
    1414:	80 91 1d 02 	lds	r24, 0x021D
    1418:	90 91 1e 02 	lds	r25, 0x021E
    141c:	89 2b       	or	r24, r25
    141e:	a9 f5       	brne	.+106    	; 0x148a <xTaskCreate+0x164>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1420:	d0 93 1e 02 	sts	0x021E, r29
    1424:	c0 93 1d 02 	sts	0x021D, r28

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1428:	80 91 28 02 	lds	r24, 0x0228
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	e9 f5       	brne	.+122    	; 0x14aa <xTaskCreate+0x184>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1430:	8e e2       	ldi	r24, 0x2E	; 46
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
    1438:	87 e3       	ldi	r24, 0x37	; 55
    143a:	92 e0       	ldi	r25, 0x02	; 2
    143c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
    1448:	89 e4       	ldi	r24, 0x49	; 73
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
    1450:	62 e5       	ldi	r22, 0x52	; 82
    1452:	e6 2e       	mov	r14, r22
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	f6 2e       	mov	r15, r22
    1458:	c7 01       	movw	r24, r14
    145a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    145e:	0b e5       	ldi	r16, 0x5B	; 91
    1460:	12 e0       	ldi	r17, 0x02	; 2
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1468:	88 e6       	ldi	r24, 0x68	; 104
    146a:	92 e0       	ldi	r25, 0x02	; 2
    146c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1470:	81 e7       	ldi	r24, 0x71	; 113
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1478:	f0 92 65 02 	sts	0x0265, r15
    147c:	e0 92 64 02 	sts	0x0264, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1480:	10 93 67 02 	sts	0x0267, r17
    1484:	00 93 66 02 	sts	0x0266, r16
    1488:	10 c0       	rjmp	.+32     	; 0x14aa <xTaskCreate+0x184>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    148a:	80 91 29 02 	lds	r24, 0x0229
    148e:	88 23       	and	r24, r24
    1490:	61 f4       	brne	.+24     	; 0x14aa <xTaskCreate+0x184>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    1492:	e0 91 1d 02 	lds	r30, 0x021D
    1496:	f0 91 1e 02 	lds	r31, 0x021E
    149a:	96 89       	ldd	r25, Z+22	; 0x16
    149c:	8e 89       	ldd	r24, Y+22	; 0x16
    149e:	89 17       	cp	r24, r25
    14a0:	20 f0       	brcs	.+8      	; 0x14aa <xTaskCreate+0x184>
				{
					pxCurrentTCB = pxNewTCB;
    14a2:	d0 93 1e 02 	sts	0x021E, r29
    14a6:	c0 93 1d 02 	sts	0x021D, r28
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    14aa:	80 91 2d 02 	lds	r24, 0x022D
    14ae:	8f 5f       	subi	r24, 0xFF	; 255
    14b0:	80 93 2d 02 	sts	0x022D, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    14b4:	9e 89       	ldd	r25, Y+22	; 0x16
    14b6:	80 91 20 02 	lds	r24, 0x0220
    14ba:	89 17       	cp	r24, r25
    14bc:	10 f4       	brcc	.+4      	; 0x14c2 <xTaskCreate+0x19c>
    14be:	90 93 20 02 	sts	0x0220, r25
    14c2:	89 e0       	ldi	r24, 0x09	; 9
    14c4:	98 9f       	mul	r25, r24
    14c6:	c0 01       	movw	r24, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	82 5d       	subi	r24, 0xD2	; 210
    14cc:	9d 4f       	sbci	r25, 0xFD	; 253
    14ce:	b4 01       	movw	r22, r8
    14d0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    14d8:	80 91 29 02 	lds	r24, 0x0229
    14dc:	88 23       	and	r24, r24
    14de:	51 f0       	breq	.+20     	; 0x14f4 <xTaskCreate+0x1ce>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    14e0:	e0 91 1d 02 	lds	r30, 0x021D
    14e4:	f0 91 1e 02 	lds	r31, 0x021E
    14e8:	96 89       	ldd	r25, Z+22	; 0x16
    14ea:	8e 89       	ldd	r24, Y+22	; 0x16
    14ec:	98 17       	cp	r25, r24
    14ee:	10 f4       	brcc	.+4      	; 0x14f4 <xTaskCreate+0x1ce>
		{
			taskYIELD_IF_USING_PREEMPTION();
    14f0:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	cf 90       	pop	r12
    1506:	bf 90       	pop	r11
    1508:	af 90       	pop	r10
    150a:	9f 90       	pop	r9
    150c:	8f 90       	pop	r8
    150e:	7f 90       	pop	r7
    1510:	6f 90       	pop	r6
    1512:	5f 90       	pop	r5
    1514:	4f 90       	pop	r4
    1516:	08 95       	ret

00001518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    151e:	89 ee       	ldi	r24, 0xE9	; 233
    1520:	98 e0       	ldi	r25, 0x08	; 8
    1522:	63 e1       	ldi	r22, 0x13	; 19
    1524:	72 e0       	ldi	r23, 0x02	; 2
    1526:	45 e5       	ldi	r20, 0x55	; 85
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	00 e0       	ldi	r16, 0x00	; 0
    1530:	ea e2       	ldi	r30, 0x2A	; 42
    1532:	ee 2e       	mov	r14, r30
    1534:	e2 e0       	ldi	r30, 0x02	; 2
    1536:	fe 2e       	mov	r15, r30
    1538:	0e 94 93 09 	call	0x1326	; 0x1326 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	81 f4       	brne	.+32     	; 0x1560 <vTaskStartScheduler+0x48>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1540:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	90 93 25 02 	sts	0x0225, r25
    154a:	80 93 24 02 	sts	0x0224, r24
		xSchedulerRunning = pdTRUE;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 93 29 02 	sts	0x0229, r24
		xTickCount = ( TickType_t ) 0U;
    1554:	10 92 23 02 	sts	0x0223, r1
    1558:	10 92 22 02 	sts	0x0222, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    155c:	0e 94 99 11 	call	0x2332	; 0x2332 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	08 95       	ret

00001568 <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    156e:	fc 01       	movw	r30, r24
    1570:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1576:	08 95       	ret

00001578 <uxQueueSpacesAvailable>:
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    1578:	fc 01       	movw	r30, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    1580:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	83 8d       	ldd	r24, Z+27	; 0x1b

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1588:	89 1b       	sub	r24, r25
    158a:	08 95       	ret

0000158c <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    158c:	fc 01       	movw	r30, r24
    158e:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1590:	08 95       	ret

00001592 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1592:	fc 01       	movw	r30, r24
    1594:	82 8d       	ldd	r24, Z+26	; 0x1a
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <xQueueIsQueueEmptyFromISR+0xc>
    159c:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    159e:	89 2f       	mov	r24, r25
    15a0:	08 95       	ret

000015a2 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    15a2:	fc 01       	movw	r30, r24
    15a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	83 8d       	ldd	r24, Z+27	; 0x1b
    15aa:	98 17       	cp	r25, r24
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <xQueueIsQueueFullFromISR+0xe>
    15ae:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15b0:	82 2f       	mov	r24, r18
    15b2:	08 95       	ret

000015b4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	04 2f       	mov	r16, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    15c0:	1a 8d       	ldd	r17, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    15c2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    15c4:	44 23       	and	r20, r20
    15c6:	c1 f1       	breq	.+112    	; 0x1638 <prvCopyDataToQueue+0x84>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    15c8:	00 23       	and	r16, r16
    15ca:	b1 f4       	brne	.+44     	; 0x15f8 <prvCopyDataToQueue+0x44>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	0e 94 af 12 	call	0x255e	; 0x255e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	28 0f       	add	r18, r24
    15de:	31 1d       	adc	r19, r1
    15e0:	3d 83       	std	Y+5, r19	; 0x05
    15e2:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	9b 81       	ldd	r25, Y+3	; 0x03
    15e8:	28 17       	cp	r18, r24
    15ea:	39 07       	cpc	r19, r25
    15ec:	28 f1       	brcs	.+74     	; 0x1638 <prvCopyDataToQueue+0x84>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    15ee:	88 81       	ld	r24, Y
    15f0:	99 81       	ldd	r25, Y+1	; 0x01
    15f2:	9d 83       	std	Y+5, r25	; 0x05
    15f4:	8c 83       	std	Y+4, r24	; 0x04
    15f6:	20 c0       	rjmp	.+64     	; 0x1638 <prvCopyDataToQueue+0x84>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	9f 81       	ldd	r25, Y+7	; 0x07
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	0e 94 af 12 	call	0x255e	; 0x255e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1602:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	44 27       	eor	r20, r20
    1608:	55 27       	eor	r21, r21
    160a:	48 1b       	sub	r20, r24
    160c:	59 0b       	sbc	r21, r25
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	9f 81       	ldd	r25, Y+7	; 0x07
    1612:	84 0f       	add	r24, r20
    1614:	95 1f       	adc	r25, r21
    1616:	9f 83       	std	Y+7, r25	; 0x07
    1618:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    161a:	28 81       	ld	r18, Y
    161c:	39 81       	ldd	r19, Y+1	; 0x01
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	30 f4       	brcc	.+12     	; 0x1630 <prvCopyDataToQueue+0x7c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	9b 81       	ldd	r25, Y+3	; 0x03
    1628:	84 0f       	add	r24, r20
    162a:	95 1f       	adc	r25, r21
    162c:	9f 83       	std	Y+7, r25	; 0x07
    162e:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1630:	02 30       	cpi	r16, 0x02	; 2
    1632:	11 f4       	brne	.+4      	; 0x1638 <prvCopyDataToQueue+0x84>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1634:	11 11       	cpse	r17, r1
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1636:	11 50       	subi	r17, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1638:	1f 5f       	subi	r17, 0xFF	; 255
    163a:	1a 8f       	std	Y+26, r17	; 0x1a

	return xReturn;
}
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1648:	fc 01       	movw	r30, r24
    164a:	56 2f       	mov	r21, r22
    164c:	a7 2f       	mov	r26, r23
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    164e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1650:	22 23       	and	r18, r18
    1652:	b9 f0       	breq	.+46     	; 0x1682 <prvCopyDataFromQueue+0x3a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1654:	86 81       	ldd	r24, Z+6	; 0x06
    1656:	97 81       	ldd	r25, Z+7	; 0x07
    1658:	82 0f       	add	r24, r18
    165a:	91 1d       	adc	r25, r1
    165c:	97 83       	std	Z+7, r25	; 0x07
    165e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1660:	22 81       	ldd	r18, Z+2	; 0x02
    1662:	33 81       	ldd	r19, Z+3	; 0x03
    1664:	82 17       	cp	r24, r18
    1666:	93 07       	cpc	r25, r19
    1668:	20 f0       	brcs	.+8      	; 0x1672 <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	97 83       	std	Z+7, r25	; 0x07
    1670:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1672:	44 8d       	ldd	r20, Z+28	; 0x1c
    1674:	66 81       	ldd	r22, Z+6	; 0x06
    1676:	77 81       	ldd	r23, Z+7	; 0x07
    1678:	85 2f       	mov	r24, r21
    167a:	9a 2f       	mov	r25, r26
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	0e 94 af 12 	call	0x255e	; 0x255e <memcpy>
    1682:	08 95       	ret

00001684 <xQueuePeekFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    168c:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    168e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1690:	88 23       	and	r24, r24
    1692:	41 f0       	breq	.+16     	; 0x16a4 <xQueuePeekFromISR+0x20>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1694:	0e 81       	ldd	r16, Y+6	; 0x06
    1696:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1698:	ce 01       	movw	r24, r28
    169a:	0e 94 24 0b 	call	0x1648	; 0x1648 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    169e:	1f 83       	std	Y+7, r17	; 0x07
    16a0:	0e 83       	std	Y+6, r16	; 0x06
    16a2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	fb 01       	movw	r30, r22
    16b8:	8a 01       	movw	r16, r20
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    16ba:	ec 01       	movw	r28, r24

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    16bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16be:	88 23       	and	r24, r24
    16c0:	61 f1       	breq	.+88     	; 0x171a <xQueueCRReceiveFromISR+0x6c>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    16c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16c4:	2e 81       	ldd	r18, Y+6	; 0x06
    16c6:	3f 81       	ldd	r19, Y+7	; 0x07
    16c8:	28 0f       	add	r18, r24
    16ca:	31 1d       	adc	r19, r1
    16cc:	3f 83       	std	Y+7, r19	; 0x07
    16ce:	2e 83       	std	Y+6, r18	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <xQueueCRReceiveFromISR+0x34>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    16da:	88 81       	ld	r24, Y
    16dc:	99 81       	ldd	r25, Y+1	; 0x01
    16de:	9f 83       	std	Y+7, r25	; 0x07
    16e0:	8e 83       	std	Y+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    16e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16e4:	81 50       	subi	r24, 0x01	; 1
    16e6:	8a 8f       	std	Y+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    16e8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16ea:	6e 81       	ldd	r22, Y+6	; 0x06
    16ec:	7f 81       	ldd	r23, Y+7	; 0x07
    16ee:	cf 01       	movw	r24, r30
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	0e 94 af 12 	call	0x255e	; 0x255e <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 81       	ld	r24, Z
    16fa:	88 23       	and	r24, r24
    16fc:	69 f4       	brne	.+26     	; 0x1718 <xQueueCRReceiveFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16fe:	88 85       	ldd	r24, Y+8	; 0x08
    1700:	88 23       	and	r24, r24
    1702:	51 f0       	breq	.+20     	; 0x1718 <xQueueCRReceiveFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1704:	ce 01       	movw	r24, r28
    1706:	08 96       	adiw	r24, 0x08	; 8
    1708:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xCoRoutineRemoveFromEventList>
    170c:	88 23       	and	r24, r24
    170e:	21 f0       	breq	.+8      	; 0x1718 <xQueueCRReceiveFromISR+0x6a>
					{
						*pxCoRoutineWoken = pdTRUE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	f8 01       	movw	r30, r16
    1714:	80 83       	st	Z, r24
    1716:	01 c0       	rjmp	.+2      	; 0x171a <xQueueCRReceiveFromISR+0x6c>
    1718:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	08 95       	ret

00001724 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	14 2f       	mov	r17, r20
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    172c:	ec 01       	movw	r28, r24

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    172e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1732:	98 17       	cp	r25, r24
    1734:	88 f4       	brcc	.+34     	; 0x1758 <xQueueCRSendFromISR+0x34>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1736:	ce 01       	movw	r24, r28
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    173e:	11 23       	and	r17, r17
    1740:	59 f4       	brne	.+22     	; 0x1758 <xQueueCRSendFromISR+0x34>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1742:	89 89       	ldd	r24, Y+17	; 0x11
    1744:	88 23       	and	r24, r24
    1746:	41 f0       	breq	.+16     	; 0x1758 <xQueueCRSendFromISR+0x34>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1748:	ce 01       	movw	r24, r28
    174a:	41 96       	adiw	r24, 0x11	; 17
    174c:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xCoRoutineRemoveFromEventList>
    1750:	48 2f       	mov	r20, r24
    1752:	81 11       	cpse	r24, r1
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	14 2f       	mov	r17, r20
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
	}
    1758:	81 2f       	mov	r24, r17
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	08 95       	ret

00001762 <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	fb 01       	movw	r30, r22
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1768:	ec 01       	movw	r28, r24

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    176a:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    176c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    176e:	88 23       	and	r24, r24
    1770:	71 f4       	brne	.+28     	; 0x178e <xQueueCRReceive+0x2c>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    1772:	41 15       	cp	r20, r1
    1774:	51 05       	cpc	r21, r1
    1776:	41 f0       	breq	.+16     	; 0x1788 <xQueueCRReceive+0x26>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    1778:	61 96       	adiw	r28, 0x11	; 17
    177a:	ca 01       	movw	r24, r20
    177c:	be 01       	movw	r22, r28
    177e:	0e 94 57 10 	call	0x20ae	; 0x20ae <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    1782:	78 94       	sei
    1784:	8c ef       	ldi	r24, 0xFC	; 252
    1786:	2f c0       	rjmp	.+94     	; 0x17e6 <xQueueCRReceive+0x84>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    1788:	78 94       	sei
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	2c c0       	rjmp	.+88     	; 0x17e6 <xQueueCRReceive+0x84>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    178e:	78 94       	sei

		portDISABLE_INTERRUPTS();
    1790:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1792:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1794:	88 23       	and	r24, r24
    1796:	31 f1       	breq	.+76     	; 0x17e4 <xQueueCRReceive+0x82>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1798:	8c 8d       	ldd	r24, Y+28	; 0x1c
    179a:	2e 81       	ldd	r18, Y+6	; 0x06
    179c:	3f 81       	ldd	r19, Y+7	; 0x07
    179e:	28 0f       	add	r18, r24
    17a0:	31 1d       	adc	r19, r1
    17a2:	3f 83       	std	Y+7, r19	; 0x07
    17a4:	2e 83       	std	Y+6, r18	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	28 17       	cp	r18, r24
    17ac:	39 07       	cpc	r19, r25
    17ae:	20 f0       	brcs	.+8      	; 0x17b8 <xQueueCRReceive+0x56>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    17b0:	88 81       	ld	r24, Y
    17b2:	99 81       	ldd	r25, Y+1	; 0x01
    17b4:	9f 83       	std	Y+7, r25	; 0x07
    17b6:	8e 83       	std	Y+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    17b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17ba:	81 50       	subi	r24, 0x01	; 1
    17bc:	8a 8f       	std	Y+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    17be:	4c 8d       	ldd	r20, Y+28	; 0x1c
    17c0:	6e 81       	ldd	r22, Y+6	; 0x06
    17c2:	7f 81       	ldd	r23, Y+7	; 0x07
    17c4:	cf 01       	movw	r24, r30
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	0e 94 af 12 	call	0x255e	; 0x255e <memcpy>

				xReturn = pdPASS;

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17cc:	88 85       	ldd	r24, Y+8	; 0x08
    17ce:	88 23       	and	r24, r24
    17d0:	41 f0       	breq	.+16     	; 0x17e2 <xQueueCRReceive+0x80>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17d2:	ce 01       	movw	r24, r28
    17d4:	08 96       	adiw	r24, 0x08	; 8
    17d6:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xCoRoutineRemoveFromEventList>
    17da:	88 23       	and	r24, r24
    17dc:	11 f0       	breq	.+4      	; 0x17e2 <xQueueCRReceive+0x80>
    17de:	8b ef       	ldi	r24, 0xFB	; 251
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <xQueueCRReceive+0x82>
    17e2:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		portENABLE_INTERRUPTS();
    17e4:	78 94       	sei

		return xReturn;
	}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    17f0:	ec 01       	movw	r28, r24

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    17f2:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	f8 94       	cli
    17f8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    17fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1802:	89 17       	cp	r24, r25
    1804:	71 f4       	brne	.+28     	; 0x1822 <xQueueCRSend+0x36>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    1806:	41 15       	cp	r20, r1
    1808:	51 05       	cpc	r21, r1
    180a:	41 f0       	breq	.+16     	; 0x181c <xQueueCRSend+0x30>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    180c:	28 96       	adiw	r28, 0x08	; 8
    180e:	ca 01       	movw	r24, r20
    1810:	be 01       	movw	r22, r28
    1812:	0e 94 57 10 	call	0x20ae	; 0x20ae <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    1816:	78 94       	sei
    1818:	8c ef       	ldi	r24, 0xFC	; 252
    181a:	1b c0       	rjmp	.+54     	; 0x1852 <xQueueCRSend+0x66>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    181c:	78 94       	sei
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	18 c0       	rjmp	.+48     	; 0x1852 <xQueueCRSend+0x66>
					return errQUEUE_FULL;
				}
			}
		}
		portENABLE_INTERRUPTS();
    1822:	78 94       	sei

		portDISABLE_INTERRUPTS();
    1824:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1826:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1828:	89 17       	cp	r24, r25
    182a:	10 f0       	brcs	.+4      	; 0x1830 <xQueueCRSend+0x44>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	10 c0       	rjmp	.+32     	; 0x1850 <xQueueCRSend+0x64>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1830:	ce 01       	movw	r24, r28
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <prvCopyDataToQueue>
				xReturn = pdPASS;

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1838:	89 89       	ldd	r24, Y+17	; 0x11
    183a:	88 23       	and	r24, r24
    183c:	41 f0       	breq	.+16     	; 0x184e <xQueueCRSend+0x62>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    183e:	ce 01       	movw	r24, r28
    1840:	41 96       	adiw	r24, 0x11	; 17
    1842:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xCoRoutineRemoveFromEventList>
    1846:	88 23       	and	r24, r24
    1848:	11 f0       	breq	.+4      	; 0x184e <xQueueCRSend+0x62>
    184a:	8b ef       	ldi	r24, 0xFB	; 251
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <xQueueCRSend+0x64>
    184e:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = errQUEUE_FULL;
			}
		}
		portENABLE_INTERRUPTS();
    1850:	78 94       	sei

		return xReturn;
	}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	08 95       	ret

00001858 <vQueueDelete>:

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    1858:	0e 94 0e 11 	call	0x221c	; 0x221c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    185c:	08 95       	ret

0000185e <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    186c:	ec 01       	movw	r28, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    186e:	1a 8d       	ldd	r17, Y+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1870:	11 23       	and	r17, r17
    1872:	11 f4       	brne	.+4      	; 0x1878 <xQueueReceiveFromISR+0x1a>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	1a c0       	rjmp	.+52     	; 0x18ac <xQueueReceiveFromISR+0x4e>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1878:	0d 8d       	ldd	r16, Y+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    187a:	0e 94 24 0b 	call	0x1648	; 0x1648 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    187e:	11 50       	subi	r17, 0x01	; 1
    1880:	1a 8f       	std	Y+26, r17	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1882:	0f 3f       	cpi	r16, 0xFF	; 255
    1884:	81 f4       	brne	.+32     	; 0x18a6 <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1886:	88 85       	ldd	r24, Y+8	; 0x08
    1888:	88 23       	and	r24, r24
    188a:	79 f0       	breq	.+30     	; 0x18aa <xQueueReceiveFromISR+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    188c:	ce 01       	movw	r24, r28
    188e:	08 96       	adiw	r24, 0x08	; 8
    1890:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    1894:	88 23       	and	r24, r24
    1896:	49 f0       	breq	.+18     	; 0x18aa <xQueueReceiveFromISR+0x4c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1898:	e1 14       	cp	r14, r1
    189a:	f1 04       	cpc	r15, r1
    189c:	31 f0       	breq	.+12     	; 0x18aa <xQueueReceiveFromISR+0x4c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	f7 01       	movw	r30, r14
    18a2:	80 83       	st	Z, r24
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <xQueueReceiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    18a6:	0f 5f       	subi	r16, 0xFF	; 255
    18a8:	0d 8f       	std	Y+29, r16	; 0x1d
    18aa:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	08 95       	ret

000018ba <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	eb 01       	movw	r28, r22
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    18c0:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    18c2:	92 8d       	ldd	r25, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    18c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18c6:	98 17       	cp	r25, r24
    18c8:	10 f0       	brcs	.+4      	; 0x18ce <xQueueGiveFromISR+0x14>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <xQueueGiveFromISR+0x40>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    18ce:	86 8d       	ldd	r24, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    18d0:	9f 5f       	subi	r25, 0xFF	; 255
    18d2:	92 8f       	std	Z+26, r25	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    18d4:	8f 3f       	cpi	r24, 0xFF	; 255
    18d6:	71 f4       	brne	.+28     	; 0x18f4 <xQueueGiveFromISR+0x3a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18d8:	81 89       	ldd	r24, Z+17	; 0x11
    18da:	88 23       	and	r24, r24
    18dc:	69 f0       	breq	.+26     	; 0x18f8 <xQueueGiveFromISR+0x3e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18de:	cf 01       	movw	r24, r30
    18e0:	41 96       	adiw	r24, 0x11	; 17
    18e2:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    18e6:	88 23       	and	r24, r24
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <xQueueGiveFromISR+0x3e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    18ea:	20 97       	sbiw	r28, 0x00	; 0
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <xQueueGiveFromISR+0x3e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	88 83       	st	Y, r24
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <xQueueGiveFromISR+0x40>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	86 8f       	std	Z+30, r24	; 0x1e
    18f8:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    190c:	ec 01       	movw	r28, r24
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    190e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1910:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1912:	98 17       	cp	r25, r24
    1914:	20 f0       	brcs	.+8      	; 0x191e <xQueueGenericSendFromISR+0x1e>
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	11 f0       	breq	.+4      	; 0x191e <xQueueGenericSendFromISR+0x1e>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	1a c0       	rjmp	.+52     	; 0x1952 <xQueueGenericSendFromISR+0x52>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    191e:	1e 8d       	ldd	r17, Y+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1920:	ce 01       	movw	r24, r28
    1922:	42 2f       	mov	r20, r18
    1924:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    1928:	1f 3f       	cpi	r17, 0xFF	; 255
    192a:	81 f4       	brne	.+32     	; 0x194c <xQueueGenericSendFromISR+0x4c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    192c:	89 89       	ldd	r24, Y+17	; 0x11
    192e:	88 23       	and	r24, r24
    1930:	79 f0       	breq	.+30     	; 0x1950 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1932:	ce 01       	movw	r24, r28
    1934:	41 96       	adiw	r24, 0x11	; 17
    1936:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    193a:	88 23       	and	r24, r24
    193c:	49 f0       	breq	.+18     	; 0x1950 <xQueueGenericSendFromISR+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    193e:	e1 14       	cp	r14, r1
    1940:	f1 04       	cpc	r15, r1
    1942:	31 f0       	breq	.+12     	; 0x1950 <xQueueGenericSendFromISR+0x50>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	f7 01       	movw	r30, r14
    1948:	80 83       	st	Z, r24
    194a:	03 c0       	rjmp	.+6      	; 0x1952 <xQueueGenericSendFromISR+0x52>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    194c:	1f 5f       	subi	r17, 0xFF	; 255
    194e:	1e 8f       	std	Y+30, r17	; 0x1e
    1950:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	08 95       	ret

0000195e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1970:	1e 8d       	ldd	r17, Y+30	; 0x1e
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1972:	91 e1       	ldi	r25, 0x11	; 17
    1974:	e9 2e       	mov	r14, r25
    1976:	f1 2c       	mov	r15, r1
    1978:	ec 0e       	add	r14, r28
    197a:	fd 1e       	adc	r15, r29
    197c:	0b c0       	rjmp	.+22     	; 0x1994 <prvUnlockQueue+0x36>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    197e:	89 89       	ldd	r24, Y+17	; 0x11
    1980:	88 23       	and	r24, r24
    1982:	51 f0       	breq	.+20     	; 0x1998 <prvUnlockQueue+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1984:	c7 01       	movw	r24, r14
    1986:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    198a:	88 23       	and	r24, r24
    198c:	11 f0       	breq	.+4      	; 0x1992 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    198e:	0e 94 25 04 	call	0x84a	; 0x84a <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1992:	11 50       	subi	r17, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1994:	11 16       	cp	r1, r17
    1996:	9c f3       	brlt	.-26     	; 0x197e <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    19a6:	1d 8d       	ldd	r17, Y+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19a8:	88 e0       	ldi	r24, 0x08	; 8
    19aa:	e8 2e       	mov	r14, r24
    19ac:	f1 2c       	mov	r15, r1
    19ae:	ec 0e       	add	r14, r28
    19b0:	fd 1e       	adc	r15, r29
    19b2:	0b c0       	rjmp	.+22     	; 0x19ca <prvUnlockQueue+0x6c>
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    19b4:	88 85       	ldd	r24, Y+8	; 0x08
    19b6:	88 23       	and	r24, r24
    19b8:	51 f0       	breq	.+20     	; 0x19ce <prvUnlockQueue+0x70>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19ba:	c7 01       	movw	r24, r14
    19bc:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    19c0:	88 23       	and	r24, r24
    19c2:	11 f0       	breq	.+4      	; 0x19c8 <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
    19c4:	0e 94 25 04 	call	0x84a	; 0x84a <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    19c8:	11 50       	subi	r17, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    19ca:	11 16       	cp	r1, r17
    19cc:	9c f3       	brlt	.-26     	; 0x19b4 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	08 95       	ret

000019e2 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19e2:	6f 92       	push	r6
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <xQueueGenericReceive+0x1e>
    1a00:	0f 92       	push	r0
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	4b 01       	movw	r8, r22
    1a0a:	5d 83       	std	Y+5, r21	; 0x05
    1a0c:	4c 83       	std	Y+4, r20	; 0x04
    1a0e:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1a10:	8c 01       	movw	r16, r24
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a12:	41 e1       	ldi	r20, 0x11	; 17
    1a14:	a4 2e       	mov	r10, r20
    1a16:	b1 2c       	mov	r11, r1
    1a18:	a8 0e       	add	r10, r24
    1a1a:	b9 1e       	adc	r11, r25
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a1e:	6e 01       	movw	r12, r28
    1a20:	08 94       	sec
    1a22:	c1 1c       	adc	r12, r1
    1a24:	d1 1c       	adc	r13, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a26:	34 e0       	ldi	r19, 0x04	; 4
    1a28:	63 2e       	mov	r6, r19
    1a2a:	71 2c       	mov	r7, r1
    1a2c:	6c 0e       	add	r6, r28
    1a2e:	7d 1e       	adc	r7, r29
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <xQueueGenericReceive+0x52>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a32:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1a3e:	ff 20       	and	r15, r15
    1a40:	11 f1       	breq	.+68     	; 0x1a86 <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1a42:	c6 80       	ldd	r12, Z+6	; 0x06
    1a44:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a46:	c8 01       	movw	r24, r16
    1a48:	b4 01       	movw	r22, r8
    1a4a:	0e 94 24 0b 	call	0x1648	; 0x1648 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a4e:	ee 20       	and	r14, r14
    1a50:	49 f4       	brne	.+18     	; 0x1a64 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1a52:	fa 94       	dec	r15
    1a54:	f8 01       	movw	r30, r16
    1a56:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a58:	80 85       	ldd	r24, Z+8	; 0x08
    1a5a:	88 23       	and	r24, r24
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a5e:	c8 01       	movw	r24, r16
    1a60:	08 96       	adiw	r24, 0x08	; 8
    1a62:	07 c0       	rjmp	.+14     	; 0x1a72 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a64:	f8 01       	movw	r30, r16
    1a66:	d7 82       	std	Z+7, r13	; 0x07
    1a68:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a6a:	81 89       	ldd	r24, Z+17	; 0x11
    1a6c:	88 23       	and	r24, r24
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a70:	c5 01       	movw	r24, r10
    1a72:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    1a76:	88 23       	and	r24, r24
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a7a:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	54 c0       	rjmp	.+168    	; 0x1b2e <xQueueGenericReceive+0x14c>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a86:	8c 81       	ldd	r24, Y+4	; 0x04
    1a88:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8a:	89 2b       	or	r24, r25
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	4c c0       	rjmp	.+152    	; 0x1b2e <xQueueGenericReceive+0x14c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1a96:	22 23       	and	r18, r18
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a9a:	c6 01       	movw	r24, r12
    1a9c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1aa4:	0e 94 88 03 	call	0x710	; 0x710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	0f 92       	push	r0
    1aae:	f8 01       	movw	r30, r16
    1ab0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <xQueueGenericReceive+0xd6>
    1ab6:	15 8e       	std	Z+29, r1	; 0x1d
    1ab8:	f8 01       	movw	r30, r16
    1aba:	86 8d       	ldd	r24, Z+30	; 0x1e
    1abc:	8f 3f       	cpi	r24, 0xFF	; 255
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <xQueueGenericReceive+0xe0>
    1ac0:	16 8e       	std	Z+30, r1	; 0x1e
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ac6:	c6 01       	movw	r24, r12
    1ac8:	b3 01       	movw	r22, r6
    1aca:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <xTaskCheckForTimeOut>
    1ace:	88 23       	and	r24, r24
    1ad0:	f9 f4       	brne	.+62     	; 0x1b10 <xQueueGenericReceive+0x12e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1ad8:	f8 01       	movw	r30, r16
    1ada:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1ae0:	88 23       	and	r24, r24
    1ae2:	81 f4       	brne	.+32     	; 0x1b04 <xQueueGenericReceive+0x122>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1ae4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ae6:	7d 81       	ldd	r23, Y+5	; 0x05
    1ae8:	c5 01       	movw	r24, r10
    1aea:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1aee:	c8 01       	movw	r24, r16
    1af0:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1af4:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
    1af8:	88 23       	and	r24, r24
    1afa:	09 f0       	breq	.+2      	; 0x1afe <xQueueGenericReceive+0x11c>
    1afc:	9a cf       	rjmp	.-204    	; 0x1a32 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    1afe:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    1b02:	97 cf       	rjmp	.-210    	; 0x1a32 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b04:	c8 01       	movw	r24, r16
    1b06:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b0a:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
    1b0e:	91 cf       	rjmp	.-222    	; 0x1a32 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b10:	c8 01       	movw	r24, r16
    1b12:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b16:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1b20:	f8 01       	movw	r30, r16
    1b22:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1b24:	0f 90       	pop	r0
    1b26:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <xQueueGenericReceive+0x14c>
    1b2c:	82 cf       	rjmp	.-252    	; 0x1a32 <xQueueGenericReceive+0x50>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	bf 90       	pop	r11
    1b4a:	af 90       	pop	r10
    1b4c:	9f 90       	pop	r9
    1b4e:	8f 90       	pop	r8
    1b50:	7f 90       	pop	r7
    1b52:	6f 90       	pop	r6
    1b54:	08 95       	ret

00001b56 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1b56:	6f 92       	push	r6
    1b58:	7f 92       	push	r7
    1b5a:	9f 92       	push	r9
    1b5c:	af 92       	push	r10
    1b5e:	bf 92       	push	r11
    1b60:	cf 92       	push	r12
    1b62:	df 92       	push	r13
    1b64:	ef 92       	push	r14
    1b66:	ff 92       	push	r15
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <xQueueGenericSend+0x1c>
    1b72:	0f 92       	push	r0
    1b74:	0f 92       	push	r0
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	5d 83       	std	Y+5, r21	; 0x05
    1b7e:	4c 83       	std	Y+4, r20	; 0x04
    1b80:	92 2e       	mov	r9, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1b82:	8c 01       	movw	r16, r24
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1b84:	68 e0       	ldi	r22, 0x08	; 8
    1b86:	e6 2e       	mov	r14, r22
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	e8 0e       	add	r14, r24
    1b8c:	f9 1e       	adc	r15, r25
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1b90:	5e 01       	movw	r10, r28
    1b92:	08 94       	sec
    1b94:	a1 1c       	adc	r10, r1
    1b96:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b98:	54 e0       	ldi	r21, 0x04	; 4
    1b9a:	65 2e       	mov	r6, r21
    1b9c:	71 2c       	mov	r7, r1
    1b9e:	6c 0e       	add	r6, r28
    1ba0:	7d 1e       	adc	r7, r29
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1bac:	f8 01       	movw	r30, r16
    1bae:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bb0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1bb2:	98 17       	cp	r25, r24
    1bb4:	18 f0       	brcs	.+6      	; 0x1bbc <xQueueGenericSend+0x66>
    1bb6:	f2 e0       	ldi	r31, 0x02	; 2
    1bb8:	9f 16       	cp	r9, r31
    1bba:	c9 f4       	brne	.+50     	; 0x1bee <xQueueGenericSend+0x98>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	b6 01       	movw	r22, r12
    1bc0:	49 2d       	mov	r20, r9
    1bc2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <prvCopyDataToQueue>
    1bc6:	98 2f       	mov	r25, r24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bc8:	f8 01       	movw	r30, r16
    1bca:	81 89       	ldd	r24, Z+17	; 0x11
    1bcc:	88 23       	and	r24, r24
    1bce:	39 f0       	breq	.+14     	; 0x1bde <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	41 96       	adiw	r24, 0x11	; 17
    1bd4:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    1bd8:	88 23       	and	r24, r24
    1bda:	29 f0       	breq	.+10     	; 0x1be6 <xQueueGenericSend+0x90>
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1bde:	99 23       	and	r25, r25
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1be2:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	4c c0       	rjmp	.+152    	; 0x1c86 <xQueueGenericSend+0x130>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf2:	89 2b       	or	r24, r25
    1bf4:	19 f4       	brne	.+6      	; 0x1bfc <xQueueGenericSend+0xa6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1bf6:	0f 90       	pop	r0
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	44 c0       	rjmp	.+136    	; 0x1c84 <xQueueGenericSend+0x12e>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    1bfc:	22 23       	and	r18, r18
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1c00:	c5 01       	movw	r24, r10
    1c02:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1c0a:	0e 94 88 03 	call	0x710	; 0x710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	0f 92       	push	r0
    1c14:	f8 01       	movw	r30, r16
    1c16:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <xQueueGenericSend+0xc8>
    1c1c:	15 8e       	std	Z+29, r1	; 0x1d
    1c1e:	f8 01       	movw	r30, r16
    1c20:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c22:	8f 3f       	cpi	r24, 0xFF	; 255
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <xQueueGenericSend+0xd2>
    1c26:	16 8e       	std	Z+30, r1	; 0x1e
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c2c:	c5 01       	movw	r24, r10
    1c2e:	b3 01       	movw	r22, r6
    1c30:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <xTaskCheckForTimeOut>
    1c34:	88 23       	and	r24, r24
    1c36:	09 f5       	brne	.+66     	; 0x1c7a <xQueueGenericSend+0x124>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c3e:	f8 01       	movw	r30, r16
    1c40:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c46:	f8 01       	movw	r30, r16
    1c48:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c4a:	98 17       	cp	r25, r24
    1c4c:	81 f4       	brne	.+32     	; 0x1c6e <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c4e:	6c 81       	ldd	r22, Y+4	; 0x04
    1c50:	7d 81       	ldd	r23, Y+5	; 0x05
    1c52:	c7 01       	movw	r24, r14
    1c54:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1c58:	c8 01       	movw	r24, r16
    1c5a:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1c5e:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
    1c62:	88 23       	and	r24, r24
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <xQueueGenericSend+0x112>
    1c66:	9e cf       	rjmp	.-196    	; 0x1ba4 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    1c68:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    1c6c:	9b cf       	rjmp	.-202    	; 0x1ba4 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c6e:	c8 01       	movw	r24, r16
    1c70:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c74:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
    1c78:	95 cf       	rjmp	.-214    	; 0x1ba4 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	0e 94 af 0c 	call	0x195e	; 0x195e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c80:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
    1c84:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	7f 90       	pop	r7
    1ca8:	6f 90       	pop	r6
    1caa:	08 95       	ret

00001cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1cb0:	ec 01       	movw	r28, r24

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1cb8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cba:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1cbc:	e2 9f       	mul	r30, r18
    1cbe:	c0 01       	movw	r24, r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	48 81       	ld	r20, Y
    1cc4:	59 81       	ldd	r21, Y+1	; 0x01
    1cc6:	84 0f       	add	r24, r20
    1cc8:	95 1f       	adc	r25, r21
    1cca:	9b 83       	std	Y+3, r25	; 0x03
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1cce:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1cd0:	5d 83       	std	Y+5, r21	; 0x05
    1cd2:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	21 50       	subi	r18, 0x01	; 1
    1cd8:	30 40       	sbci	r19, 0x00	; 0
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	2e 9f       	mul	r18, r30
    1cde:	c0 01       	movw	r24, r0
    1ce0:	2f 9f       	mul	r18, r31
    1ce2:	90 0d       	add	r25, r0
    1ce4:	3e 9f       	mul	r19, r30
    1ce6:	90 0d       	add	r25, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	48 0f       	add	r20, r24
    1cec:	59 1f       	adc	r21, r25
    1cee:	5f 83       	std	Y+7, r21	; 0x07
    1cf0:	4e 83       	std	Y+6, r20	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1cf6:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1cf8:	66 23       	and	r22, r22
    1cfa:	61 f4       	brne	.+24     	; 0x1d14 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1cfc:	88 85       	ldd	r24, Y+8	; 0x08
    1cfe:	88 23       	and	r24, r24
    1d00:	89 f0       	breq	.+34     	; 0x1d24 <xQueueGenericReset+0x78>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d02:	ce 01       	movw	r24, r28
    1d04:	08 96       	adiw	r24, 0x08	; 8
    1d06:	0e 94 57 05 	call	0xaae	; 0xaae <xTaskRemoveFromEventList>
    1d0a:	88 23       	and	r24, r24
    1d0c:	59 f0       	breq	.+22     	; 0x1d24 <xQueueGenericReset+0x78>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1d0e:	0e 94 34 12 	call	0x2468	; 0x2468 <vPortYield>
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <xQueueGenericReset+0x78>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1d14:	ce 01       	movw	r24, r28
    1d16:	08 96       	adiw	r24, 0x08	; 8
    1d18:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	41 96       	adiw	r24, 0x11	; 17
    1d20:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	08 2f       	mov	r16, r24
    1d3a:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    1d3c:	66 23       	and	r22, r22
    1d3e:	19 f4       	brne	.+6      	; 0x1d46 <xQueueGenericCreate+0x16>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <xQueueGenericCreate+0x1c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d46:	68 9f       	mul	r22, r24
    1d48:	c0 01       	movw	r24, r0
    1d4a:	11 24       	eor	r1, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1d4c:	4f 96       	adiw	r24, 0x1f	; 31
    1d4e:	0e 94 1e 11 	call	0x223c	; 0x223c <pvPortMalloc>
    1d52:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1d58:	11 23       	and	r17, r17
    1d5a:	19 f4       	brne	.+6      	; 0x1d62 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1d5c:	99 83       	std	Y+1, r25	; 0x01
    1d5e:	88 83       	st	Y, r24
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <xQueueGenericCreate+0x38>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1d62:	4f 96       	adiw	r24, 0x1f	; 31
    1d64:	99 83       	std	Y+1, r25	; 0x01
    1d66:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1d68:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1d6a:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	0e 94 56 0e 	call	0x1cac	; 0x1cac <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    1d74:	ce 01       	movw	r24, r28
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1d80:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d82:	9c 01       	movw	r18, r24
    1d84:	2d 5f       	subi	r18, 0xFD	; 253
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	32 83       	std	Z+2, r19	; 0x02
    1d8a:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	9f ef       	ldi	r25, 0xFF	; 255
    1d90:	94 83       	std	Z+4, r25	; 0x04
    1d92:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d94:	36 83       	std	Z+6, r19	; 0x06
    1d96:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d98:	30 87       	std	Z+8, r19	; 0x08
    1d9a:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1d9c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1d9e:	08 95       	ret

00001da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1da0:	fc 01       	movw	r30, r24
    1da2:	11 86       	std	Z+9, r1	; 0x09
    1da4:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1da6:	08 95       	ret

00001da8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1da8:	ac 01       	movw	r20, r24
ListItem_t * const pxIndex = pxList->pxIndex;
    1daa:	fc 01       	movw	r30, r24
    1dac:	a1 81       	ldd	r26, Z+1	; 0x01
    1dae:	b2 81       	ldd	r27, Z+2	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1db0:	fb 01       	movw	r30, r22
    1db2:	b3 83       	std	Z+3, r27	; 0x03
    1db4:	a2 83       	std	Z+2, r26	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1db6:	14 96       	adiw	r26, 0x04	; 4
    1db8:	8d 91       	ld	r24, X+
    1dba:	9c 91       	ld	r25, X
    1dbc:	15 97       	sbiw	r26, 0x05	; 5
    1dbe:	95 83       	std	Z+5, r25	; 0x05
    1dc0:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1dc2:	14 96       	adiw	r26, 0x04	; 4
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	15 97       	sbiw	r26, 0x05	; 5
    1dca:	73 83       	std	Z+3, r23	; 0x03
    1dcc:	62 83       	std	Z+2, r22	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1dce:	15 96       	adiw	r26, 0x05	; 5
    1dd0:	7c 93       	st	X, r23
    1dd2:	6e 93       	st	-X, r22
    1dd4:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1dd6:	fb 01       	movw	r30, r22
    1dd8:	51 87       	std	Z+9, r21	; 0x09
    1dda:	40 87       	std	Z+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
    1ddc:	fa 01       	movw	r30, r20
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 5f       	subi	r24, 0xFF	; 255
    1de2:	80 83       	st	Z, r24
}
    1de4:	08 95       	ret

00001de6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	9c 01       	movw	r18, r24
    1dec:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1dee:	48 81       	ld	r20, Y
    1df0:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1df2:	8f ef       	ldi	r24, 0xFF	; 255
    1df4:	4f 3f       	cpi	r20, 0xFF	; 255
    1df6:	58 07       	cpc	r21, r24
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	a7 81       	ldd	r26, Z+7	; 0x07
    1dfe:	b0 85       	ldd	r27, Z+8	; 0x08
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e02:	d9 01       	movw	r26, r18
    1e04:	13 96       	adiw	r26, 0x03	; 3
    1e06:	12 96       	adiw	r26, 0x02	; 2
    1e08:	ed 91       	ld	r30, X+
    1e0a:	fc 91       	ld	r31, X
    1e0c:	13 97       	sbiw	r26, 0x03	; 3
    1e0e:	80 81       	ld	r24, Z
    1e10:	91 81       	ldd	r25, Z+1	; 0x01
    1e12:	48 17       	cp	r20, r24
    1e14:	59 07       	cpc	r21, r25
    1e16:	10 f0       	brcs	.+4      	; 0x1e1c <vListInsert+0x36>
    1e18:	df 01       	movw	r26, r30
    1e1a:	f5 cf       	rjmp	.-22     	; 0x1e06 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1e1c:	12 96       	adiw	r26, 0x02	; 2
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	13 97       	sbiw	r26, 0x03	; 3
    1e24:	fb 83       	std	Y+3, r31	; 0x03
    1e26:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e28:	d5 83       	std	Z+5, r29	; 0x05
    1e2a:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1e2c:	bd 83       	std	Y+5, r27	; 0x05
    1e2e:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1e30:	13 96       	adiw	r26, 0x03	; 3
    1e32:	dc 93       	st	X, r29
    1e34:	ce 93       	st	-X, r28
    1e36:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e38:	39 87       	std	Y+9, r19	; 0x09
    1e3a:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	80 83       	st	Z, r24
}
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	dc 01       	movw	r26, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1e50:	18 96       	adiw	r26, 0x08	; 8
    1e52:	cd 91       	ld	r28, X+
    1e54:	dc 91       	ld	r29, X
    1e56:	19 97       	sbiw	r26, 0x09	; 9

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	4d 91       	ld	r20, X+
    1e5c:	5c 91       	ld	r21, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
    1e60:	14 96       	adiw	r26, 0x04	; 4
    1e62:	8d 91       	ld	r24, X+
    1e64:	9c 91       	ld	r25, X
    1e66:	15 97       	sbiw	r26, 0x05	; 5
    1e68:	fa 01       	movw	r30, r20
    1e6a:	95 83       	std	Z+5, r25	; 0x05
    1e6c:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1e6e:	14 96       	adiw	r26, 0x04	; 4
    1e70:	2d 91       	ld	r18, X+
    1e72:	3c 91       	ld	r19, X
    1e74:	15 97       	sbiw	r26, 0x05	; 5
    1e76:	f9 01       	movw	r30, r18
    1e78:	53 83       	std	Z+3, r21	; 0x03
    1e7a:	42 83       	std	Z+2, r20	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	8a 17       	cp	r24, r26
    1e82:	9b 07       	cpc	r25, r27
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1e86:	3a 83       	std	Y+2, r19	; 0x02
    1e88:	29 83       	std	Y+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1e8a:	19 96       	adiw	r26, 0x09	; 9
    1e8c:	1c 92       	st	X, r1
    1e8e:	1e 92       	st	-X, r1
    1e90:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    1e92:	88 81       	ld	r24, Y
    1e94:	81 50       	subi	r24, 0x01	; 1
    1e96:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	15 96       	adiw	r26, 0x05	; 5
    1eaa:	ed 91       	ld	r30, X+
    1eac:	fc 91       	ld	r31, X
    1eae:	16 97       	sbiw	r26, 0x06	; 6
    1eb0:	e6 80       	ldd	r14, Z+6	; 0x06
    1eb2:	f7 80       	ldd	r15, Z+7	; 0x07
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1eb4:	87 01       	movw	r16, r14
    1eb6:	04 5f       	subi	r16, 0xF4	; 244
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	c8 01       	movw	r24, r16
    1ebc:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1ec0:	8b ea       	ldi	r24, 0xAB	; 171
    1ec2:	92 e0       	ldi	r25, 0x02	; 2
    1ec4:	b8 01       	movw	r22, r16
    1ec6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	e0 91 7a 02 	lds	r30, 0x027A
    1ed0:	f0 91 7b 02 	lds	r31, 0x027B
    1ed4:	d7 01       	movw	r26, r14
    1ed6:	56 96       	adiw	r26, 0x16	; 22
    1ed8:	9c 91       	ld	r25, X
    1eda:	86 89       	ldd	r24, Z+22	; 0x16
    1edc:	98 17       	cp	r25, r24
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <xCoRoutineRemoveFromEventList+0x44>
    1ee0:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1ee2:	82 2f       	mov	r24, r18
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	08 95       	ret

00001eee <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1ef8:	99 e0       	ldi	r25, 0x09	; 9
    1efa:	f9 2e       	mov	r15, r25
    1efc:	21 c0       	rjmp	.+66     	; 0x1f40 <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1efe:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    1f00:	e0 91 b0 02 	lds	r30, 0x02B0
    1f04:	f0 91 b1 02 	lds	r31, 0x02B1
    1f08:	06 81       	ldd	r16, Z+6	; 0x06
    1f0a:	17 81       	ldd	r17, Z+7	; 0x07
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	0c 96       	adiw	r24, 0x0c	; 12
    1f10:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    1f14:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1f16:	e8 01       	movw	r28, r16
    1f18:	22 96       	adiw	r28, 0x02	; 2
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1f20:	f8 01       	movw	r30, r16
    1f22:	96 89       	ldd	r25, Z+22	; 0x16
    1f24:	80 91 7c 02 	lds	r24, 0x027C
    1f28:	89 17       	cp	r24, r25
    1f2a:	10 f4       	brcc	.+4      	; 0x1f30 <vCoRoutineSchedule+0x42>
    1f2c:	90 93 7c 02 	sts	0x027C, r25
    1f30:	9f 9d       	mul	r25, r15
    1f32:	c0 01       	movw	r24, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	8d 57       	subi	r24, 0x7D	; 125
    1f38:	9d 4f       	sbci	r25, 0xFD	; 253
    1f3a:	be 01       	movw	r22, r28
    1f3c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1f40:	80 91 ab 02 	lds	r24, 0x02AB
    1f44:	88 23       	and	r24, r24
    1f46:	d9 f6       	brne	.-74     	; 0x1efe <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1f48:	0e 94 8e 03 	call	0x71c	; 0x71c <xTaskGetTickCount>
    1f4c:	20 91 7d 02 	lds	r18, 0x027D
    1f50:	30 91 7e 02 	lds	r19, 0x027E
    1f54:	82 1b       	sub	r24, r18
    1f56:	93 0b       	sbc	r25, r19
    1f58:	90 93 80 02 	sts	0x0280, r25
    1f5c:	80 93 7f 02 	sts	0x027F, r24
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1f60:	89 e0       	ldi	r24, 0x09	; 9
    1f62:	f8 2e       	mov	r15, r24
    1f64:	53 c0       	rjmp	.+166    	; 0x200c <vCoRoutineSchedule+0x11e>
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	90 93 82 02 	sts	0x0282, r25
    1f6c:	80 93 81 02 	sts	0x0281, r24
		xPassedTicks--;
    1f70:	21 50       	subi	r18, 0x01	; 1
    1f72:	30 40       	sbci	r19, 0x00	; 0
    1f74:	30 93 80 02 	sts	0x0280, r19
    1f78:	20 93 7f 02 	sts	0x027F, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1f7c:	89 2b       	or	r24, r25
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <vCoRoutineSchedule+0x94>
    1f80:	3e c0       	rjmp	.+124    	; 0x1ffe <vCoRoutineSchedule+0x110>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1f82:	20 91 a7 02 	lds	r18, 0x02A7
    1f86:	30 91 a8 02 	lds	r19, 0x02A8
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1f8a:	80 91 a9 02 	lds	r24, 0x02A9
    1f8e:	90 91 aa 02 	lds	r25, 0x02AA
    1f92:	90 93 a8 02 	sts	0x02A8, r25
    1f96:	80 93 a7 02 	sts	0x02A7, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1f9a:	30 93 aa 02 	sts	0x02AA, r19
    1f9e:	20 93 a9 02 	sts	0x02A9, r18
    1fa2:	2d c0       	rjmp	.+90     	; 0x1ffe <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1fa4:	05 80       	ldd	r0, Z+5	; 0x05
    1fa6:	f6 81       	ldd	r31, Z+6	; 0x06
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	c6 81       	ldd	r28, Z+6	; 0x06
    1fac:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1fae:	20 91 81 02 	lds	r18, 0x0281
    1fb2:	30 91 82 02 	lds	r19, 0x0282
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	28 17       	cp	r18, r24
    1fbc:	39 07       	cpc	r19, r25
    1fbe:	30 f1       	brcs	.+76     	; 0x200c <vCoRoutineSchedule+0x11e>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    1fc0:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	0e 5f       	subi	r16, 0xFE	; 254
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	c8 01       	movw	r24, r16
    1fca:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    1fce:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd0:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd2:	89 2b       	or	r24, r25
    1fd4:	21 f0       	breq	.+8      	; 0x1fde <vCoRoutineSchedule+0xf0>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0c 96       	adiw	r24, 0x0c	; 12
    1fda:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1fde:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1fe0:	9e 89       	ldd	r25, Y+22	; 0x16
    1fe2:	80 91 7c 02 	lds	r24, 0x027C
    1fe6:	89 17       	cp	r24, r25
    1fe8:	10 f4       	brcc	.+4      	; 0x1fee <vCoRoutineSchedule+0x100>
    1fea:	90 93 7c 02 	sts	0x027C, r25
    1fee:	9f 9d       	mul	r25, r15
    1ff0:	c0 01       	movw	r24, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	8d 57       	subi	r24, 0x7D	; 125
    1ff6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ff8:	b8 01       	movw	r22, r16
    1ffa:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    1ffe:	e0 91 a7 02 	lds	r30, 0x02A7
    2002:	f0 91 a8 02 	lds	r31, 0x02A8
    2006:	80 81       	ld	r24, Z
    2008:	88 23       	and	r24, r24
    200a:	61 f6       	brne	.-104    	; 0x1fa4 <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    200c:	20 91 7f 02 	lds	r18, 0x027F
    2010:	30 91 80 02 	lds	r19, 0x0280
    2014:	80 91 81 02 	lds	r24, 0x0281
    2018:	90 91 82 02 	lds	r25, 0x0282
    201c:	21 15       	cp	r18, r1
    201e:	31 05       	cpc	r19, r1
    2020:	09 f0       	breq	.+2      	; 0x2024 <vCoRoutineSchedule+0x136>
    2022:	a1 cf       	rjmp	.-190    	; 0x1f66 <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    2024:	90 93 7e 02 	sts	0x027E, r25
    2028:	80 93 7d 02 	sts	0x027D, r24
    202c:	90 91 7c 02 	lds	r25, 0x027C

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2030:	29 e0       	ldi	r18, 0x09	; 9
    2032:	06 c0       	rjmp	.+12     	; 0x2040 <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2034:	99 23       	and	r25, r25
    2036:	19 f4       	brne	.+6      	; 0x203e <vCoRoutineSchedule+0x150>
    2038:	10 92 7c 02 	sts	0x027C, r1
    203c:	32 c0       	rjmp	.+100    	; 0x20a2 <vCoRoutineSchedule+0x1b4>
    203e:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2040:	92 9f       	mul	r25, r18
    2042:	d0 01       	movw	r26, r0
    2044:	11 24       	eor	r1, r1
    2046:	ad 57       	subi	r26, 0x7D	; 125
    2048:	bd 4f       	sbci	r27, 0xFD	; 253
    204a:	8c 91       	ld	r24, X
    204c:	88 23       	and	r24, r24
    204e:	91 f3       	breq	.-28     	; 0x2034 <vCoRoutineSchedule+0x146>
    2050:	90 93 7c 02 	sts	0x027C, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2054:	11 96       	adiw	r26, 0x01	; 1
    2056:	ed 91       	ld	r30, X+
    2058:	fc 91       	ld	r31, X
    205a:	12 97       	sbiw	r26, 0x02	; 2
    205c:	02 80       	ldd	r0, Z+2	; 0x02
    205e:	f3 81       	ldd	r31, Z+3	; 0x03
    2060:	e0 2d       	mov	r30, r0
    2062:	12 96       	adiw	r26, 0x02	; 2
    2064:	fc 93       	st	X, r31
    2066:	ee 93       	st	-X, r30
    2068:	11 97       	sbiw	r26, 0x01	; 1
    206a:	cd 01       	movw	r24, r26
    206c:	03 96       	adiw	r24, 0x03	; 3
    206e:	e8 17       	cp	r30, r24
    2070:	f9 07       	cpc	r31, r25
    2072:	31 f4       	brne	.+12     	; 0x2080 <vCoRoutineSchedule+0x192>
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	12 96       	adiw	r26, 0x02	; 2
    207a:	9c 93       	st	X, r25
    207c:	8e 93       	st	-X, r24
    207e:	11 97       	sbiw	r26, 0x01	; 1
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	12 97       	sbiw	r26, 0x02	; 2
    2088:	06 80       	ldd	r0, Z+6	; 0x06
    208a:	f7 81       	ldd	r31, Z+7	; 0x07
    208c:	e0 2d       	mov	r30, r0
    208e:	f0 93 7b 02 	sts	0x027B, r31
    2092:	e0 93 7a 02 	sts	0x027A, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2096:	20 81       	ld	r18, Z
    2098:	31 81       	ldd	r19, Z+1	; 0x01
    209a:	cf 01       	movw	r24, r30
    209c:	67 89       	ldd	r22, Z+23	; 0x17
    209e:	f9 01       	movw	r30, r18
    20a0:	19 95       	eicall

	return;
}
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	08 95       	ret

000020ae <vCoRoutineAddToDelayedList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	eb 01       	movw	r28, r22
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    20b8:	00 91 81 02 	lds	r16, 0x0281
    20bc:	10 91 82 02 	lds	r17, 0x0282
    20c0:	08 0f       	add	r16, r24
    20c2:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20c4:	80 91 7a 02 	lds	r24, 0x027A
    20c8:	90 91 7b 02 	lds	r25, 0x027B
    20cc:	02 96       	adiw	r24, 0x02	; 2
    20ce:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    20d2:	e0 91 7a 02 	lds	r30, 0x027A
    20d6:	f0 91 7b 02 	lds	r31, 0x027B
    20da:	13 83       	std	Z+3, r17	; 0x03
    20dc:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    20de:	80 91 81 02 	lds	r24, 0x0281
    20e2:	90 91 82 02 	lds	r25, 0x0282
    20e6:	bf 01       	movw	r22, r30
    20e8:	6e 5f       	subi	r22, 0xFE	; 254
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	08 17       	cp	r16, r24
    20ee:	19 07       	cpc	r17, r25
    20f0:	28 f4       	brcc	.+10     	; 0x20fc <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20f2:	80 91 a9 02 	lds	r24, 0x02A9
    20f6:	90 91 aa 02 	lds	r25, 0x02AA
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20fc:	80 91 a7 02 	lds	r24, 0x02A7
    2100:	90 91 a8 02 	lds	r25, 0x02A8
    2104:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vListInsert>
	}

	if( pxEventList )
    2108:	20 97       	sbiw	r28, 0x00	; 0
    210a:	49 f0       	breq	.+18     	; 0x211e <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    210c:	60 91 7a 02 	lds	r22, 0x027A
    2110:	70 91 7b 02 	lds	r23, 0x027B
    2114:	64 5f       	subi	r22, 0xF4	; 244
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	ce 01       	movw	r24, r28
    211a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vListInsert>
	}
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
    2128:	af 92       	push	r10
    212a:	bf 92       	push	r11
    212c:	cf 92       	push	r12
    212e:	df 92       	push	r13
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	6c 01       	movw	r12, r24
    213e:	b6 2e       	mov	r11, r22
    2140:	a4 2e       	mov	r10, r20
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    2142:	8a e1       	ldi	r24, 0x1A	; 26
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 1e 11 	call	0x223c	; 0x223c <pvPortMalloc>
    214a:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	11 f4       	brne	.+4      	; 0x2154 <xCoRoutineCreate+0x2c>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	59 c0       	rjmp	.+178    	; 0x2206 <__stack+0x7>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2154:	80 91 7a 02 	lds	r24, 0x027A
    2158:	90 91 7b 02 	lds	r25, 0x027B
    215c:	89 2b       	or	r24, r25
    215e:	21 f5       	brne	.+72     	; 0x21a8 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2160:	d0 93 7b 02 	sts	0x027B, r29
    2164:	c0 93 7a 02 	sts	0x027A, r28
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2168:	83 e8       	ldi	r24, 0x83	; 131
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
    2170:	8c e8       	ldi	r24, 0x8C	; 140
    2172:	92 e0       	ldi	r25, 0x02	; 2
    2174:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    2178:	25 e9       	ldi	r18, 0x95	; 149
    217a:	e2 2e       	mov	r14, r18
    217c:	22 e0       	ldi	r18, 0x02	; 2
    217e:	f2 2e       	mov	r15, r18
    2180:	c7 01       	movw	r24, r14
    2182:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    2186:	0e e9       	ldi	r16, 0x9E	; 158
    2188:	12 e0       	ldi	r17, 0x02	; 2
    218a:	c8 01       	movw	r24, r16
    218c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    2190:	8b ea       	ldi	r24, 0xAB	; 171
    2192:	92 e0       	ldi	r25, 0x02	; 2
    2194:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2198:	f0 92 a8 02 	sts	0x02A8, r15
    219c:	e0 92 a7 02 	sts	0x02A7, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    21a0:	10 93 aa 02 	sts	0x02AA, r17
    21a4:	00 93 a9 02 	sts	0x02A9, r16
    21a8:	eb 2c       	mov	r14, r11
    21aa:	bb 20       	and	r11, r11
    21ac:	11 f0       	breq	.+4      	; 0x21b2 <xCoRoutineCreate+0x8a>
    21ae:	ee 24       	eor	r14, r14
    21b0:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    21b2:	19 8e       	std	Y+25, r1	; 0x19
    21b4:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    21b6:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    21b8:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    21ba:	fe 01       	movw	r30, r28
    21bc:	c1 92       	st	Z+, r12
    21be:	d1 92       	st	Z+, r13
    21c0:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    21c2:	cf 01       	movw	r24, r30
    21c4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    21c8:	ce 01       	movw	r24, r28
    21ca:	0c 96       	adiw	r24, 0x0c	; 12
    21cc:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    21d0:	d9 87       	std	Y+9, r29	; 0x09
    21d2:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    21d4:	db 8b       	std	Y+19, r29	; 0x13
    21d6:	ca 8b       	std	Y+18, r28	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	8e 19       	sub	r24, r14
    21de:	91 09       	sbc	r25, r1
    21e0:	9d 87       	std	Y+13, r25	; 0x0d
    21e2:	8c 87       	std	Y+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    21e4:	9e 89       	ldd	r25, Y+22	; 0x16
    21e6:	80 91 7c 02 	lds	r24, 0x027C
    21ea:	89 17       	cp	r24, r25
    21ec:	10 f4       	brcc	.+4      	; 0x21f2 <xCoRoutineCreate+0xca>
    21ee:	90 93 7c 02 	sts	0x027C, r25
    21f2:	89 e0       	ldi	r24, 0x09	; 9
    21f4:	98 9f       	mul	r25, r24
    21f6:	c0 01       	movw	r24, r0
    21f8:	11 24       	eor	r1, r1
    21fa:	8d 57       	subi	r24, 0x7D	; 125
    21fc:	9d 4f       	sbci	r25, 0xFD	; 253
    21fe:	b8 01       	movw	r22, r16
    2200:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <vListInsertEnd>
    2204:	81 e0       	ldi	r24, 0x01	; 1
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}

	return xReturn;
}
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	df 90       	pop	r13
    2214:	cf 90       	pop	r12
    2216:	bf 90       	pop	r11
    2218:	af 90       	pop	r10
    221a:	08 95       	ret

0000221c <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    221c:	08 95       	ret

0000221e <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    221e:	10 92 b5 02 	sts	0x02B5, r1
    2222:	10 92 b4 02 	sts	0x02B4, r1
}
    2226:	08 95       	ret

00002228 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2228:	2b ed       	ldi	r18, 0xDB	; 219
    222a:	35 e0       	ldi	r19, 0x05	; 5
    222c:	80 91 b4 02 	lds	r24, 0x02B4
    2230:	90 91 b5 02 	lds	r25, 0x02B5
    2234:	28 1b       	sub	r18, r24
    2236:	39 0b       	sbc	r19, r25
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
    2238:	c9 01       	movw	r24, r18
    223a:	08 95       	ret

0000223c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    2242:	0e 94 88 03 	call	0x710	; 0x710 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    2246:	80 91 b6 02 	lds	r24, 0x02B6
    224a:	90 91 b7 02 	lds	r25, 0x02B7
    224e:	89 2b       	or	r24, r25
    2250:	31 f4       	brne	.+12     	; 0x225e <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2252:	89 eb       	ldi	r24, 0xB9	; 185
    2254:	92 e0       	ldi	r25, 0x02	; 2
    2256:	90 93 b7 02 	sts	0x02B7, r25
    225a:	80 93 b6 02 	sts	0x02B6, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    225e:	20 91 b4 02 	lds	r18, 0x02B4
    2262:	30 91 b5 02 	lds	r19, 0x02B5
    2266:	ce 01       	movw	r24, r28
    2268:	82 0f       	add	r24, r18
    226a:	93 1f       	adc	r25, r19
    226c:	45 e0       	ldi	r20, 0x05	; 5
    226e:	8b 3d       	cpi	r24, 0xDB	; 219
    2270:	94 07       	cpc	r25, r20
    2272:	70 f4       	brcc	.+28     	; 0x2290 <pvPortMalloc+0x54>
    2274:	28 17       	cp	r18, r24
    2276:	39 07       	cpc	r19, r25
    2278:	58 f4       	brcc	.+22     	; 0x2290 <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    227a:	c0 91 b6 02 	lds	r28, 0x02B6
    227e:	d0 91 b7 02 	lds	r29, 0x02B7
    2282:	c2 0f       	add	r28, r18
    2284:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    2286:	90 93 b5 02 	sts	0x02B5, r25
    228a:	80 93 b4 02 	sts	0x02B4, r24
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <pvPortMalloc+0x58>
    2290:	c0 e0       	ldi	r28, 0x00	; 0
    2292:	d0 e0       	ldi	r29, 0x00	; 0
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2294:	0e 94 ca 06 	call	0xd94	; 0xd94 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2298:	ce 01       	movw	r24, r28
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	08 95       	ret

000022a0 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    22a0:	fc 01       	movw	r30, r24
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    22a2:	91 e1       	ldi	r25, 0x11	; 17
    22a4:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    22a6:	22 e2       	ldi	r18, 0x22	; 34
    22a8:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    22aa:	83 e3       	ldi	r24, 0x33	; 51
    22ac:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22ae:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22b0:	72 93       	st	-Z, r23
	pxTopOfStack--;
  
  //-------------------ADDED FOR ATMEGA 2560--------------------------
  usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22b2:	12 92       	st	-Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    22b4:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    22b6:	80 e8       	ldi	r24, 0x80	; 128
    22b8:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    22ba:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    22c4:	84 e0       	ldi	r24, 0x04	; 4
    22c6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    22c8:	85 e0       	ldi	r24, 0x05	; 5
    22ca:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    22cc:	86 e0       	ldi	r24, 0x06	; 6
    22ce:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    22d0:	87 e0       	ldi	r24, 0x07	; 7
    22d2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    22d8:	89 e0       	ldi	r24, 0x09	; 9
    22da:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    22dc:	80 e1       	ldi	r24, 0x10	; 16
    22de:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    22e0:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    22e2:	82 e1       	ldi	r24, 0x12	; 18
    22e4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    22e6:	83 e1       	ldi	r24, 0x13	; 19
    22e8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    22ea:	84 e1       	ldi	r24, 0x14	; 20
    22ec:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    22ee:	85 e1       	ldi	r24, 0x15	; 21
    22f0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    22f2:	86 e1       	ldi	r24, 0x16	; 22
    22f4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    22f6:	87 e1       	ldi	r24, 0x17	; 23
    22f8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    22fa:	88 e1       	ldi	r24, 0x18	; 24
    22fc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    22fe:	89 e1       	ldi	r24, 0x19	; 25
    2300:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2306:	81 e2       	ldi	r24, 0x21	; 33
    2308:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    230a:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    230c:	83 e2       	ldi	r24, 0x23	; 35
    230e:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2310:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2312:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2314:	86 e2       	ldi	r24, 0x26	; 38
    2316:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2318:	87 e2       	ldi	r24, 0x27	; 39
    231a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    231c:	88 e2       	ldi	r24, 0x28	; 40
    231e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2320:	89 e2       	ldi	r24, 0x29	; 41
    2322:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2324:	80 e3       	ldi	r24, 0x30	; 48
    2326:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    2328:	81 e3       	ldi	r24, 0x31	; 49
    232a:	82 93       	st	-Z, r24
    232c:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    232e:	cf 01       	movw	r24, r30
    2330:	08 95       	ret

00002332 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2332:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    2336:	89 ef       	ldi	r24, 0xF9	; 249
    2338:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    233c:	8b e0       	ldi	r24, 0x0B	; 11
    233e:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    2342:	ef e6       	ldi	r30, 0x6F	; 111
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2348:	80 61       	ori	r24, 0x10	; 16
	TIMSK1 = ucLowByte;
    234a:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    234c:	a0 91 1d 02 	lds	r26, 0x021D
    2350:	b0 91 1e 02 	lds	r27, 0x021E
    2354:	cd 91       	ld	r28, X+
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	dd 91       	ld	r29, X+
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	ff 91       	pop	r31
    235e:	ef 91       	pop	r30
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	bf 91       	pop	r27
    2366:	af 91       	pop	r26
    2368:	9f 91       	pop	r25
    236a:	8f 91       	pop	r24
    236c:	7f 91       	pop	r23
    236e:	6f 91       	pop	r22
    2370:	5f 91       	pop	r21
    2372:	4f 91       	pop	r20
    2374:	3f 91       	pop	r19
    2376:	2f 91       	pop	r18
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	2f 90       	pop	r2
    2398:	1f 90       	pop	r1
    239a:	0f 90       	pop	r0
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    23a0:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	08 95       	ret

000023a6 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    23a6:	08 95       	ret

000023a8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    23a8:	0f 92       	push	r0
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	0f 92       	push	r0
    23b0:	1f 92       	push	r1
    23b2:	11 24       	eor	r1, r1
    23b4:	2f 92       	push	r2
    23b6:	3f 92       	push	r3
    23b8:	4f 92       	push	r4
    23ba:	5f 92       	push	r5
    23bc:	6f 92       	push	r6
    23be:	7f 92       	push	r7
    23c0:	8f 92       	push	r8
    23c2:	9f 92       	push	r9
    23c4:	af 92       	push	r10
    23c6:	bf 92       	push	r11
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	2f 93       	push	r18
    23d6:	3f 93       	push	r19
    23d8:	4f 93       	push	r20
    23da:	5f 93       	push	r21
    23dc:	6f 93       	push	r22
    23de:	7f 93       	push	r23
    23e0:	8f 93       	push	r24
    23e2:	9f 93       	push	r25
    23e4:	af 93       	push	r26
    23e6:	bf 93       	push	r27
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31
    23f0:	a0 91 1d 02 	lds	r26, 0x021D
    23f4:	b0 91 1e 02 	lds	r27, 0x021E
    23f8:	0d b6       	in	r0, 0x3d	; 61
    23fa:	0d 92       	st	X+, r0
    23fc:	0e b6       	in	r0, 0x3e	; 62
    23fe:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2400:	0e 94 97 05 	call	0xb2e	; 0xb2e <xTaskIncrementTick>
    2404:	88 23       	and	r24, r24
    2406:	11 f0       	breq	.+4      	; 0x240c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2408:	0e 94 ad 03 	call	0x75a	; 0x75a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    240c:	a0 91 1d 02 	lds	r26, 0x021D
    2410:	b0 91 1e 02 	lds	r27, 0x021E
    2414:	cd 91       	ld	r28, X+
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	dd 91       	ld	r29, X+
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	ff 91       	pop	r31
    241e:	ef 91       	pop	r30
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	bf 91       	pop	r27
    2426:	af 91       	pop	r26
    2428:	9f 91       	pop	r25
    242a:	8f 91       	pop	r24
    242c:	7f 91       	pop	r23
    242e:	6f 91       	pop	r22
    2430:	5f 91       	pop	r21
    2432:	4f 91       	pop	r20
    2434:	3f 91       	pop	r19
    2436:	2f 91       	pop	r18
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	7f 90       	pop	r7
    244e:	6f 90       	pop	r6
    2450:	5f 90       	pop	r5
    2452:	4f 90       	pop	r4
    2454:	3f 90       	pop	r3
    2456:	2f 90       	pop	r2
    2458:	1f 90       	pop	r1
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2460:	08 95       	ret

00002462 <__vector_17>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2462:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2466:	18 95       	reti

00002468 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2468:	0f 92       	push	r0
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	0f 92       	push	r0
    2470:	1f 92       	push	r1
    2472:	11 24       	eor	r1, r1
    2474:	2f 92       	push	r2
    2476:	3f 92       	push	r3
    2478:	4f 92       	push	r4
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	2f 93       	push	r18
    2496:	3f 93       	push	r19
    2498:	4f 93       	push	r20
    249a:	5f 93       	push	r21
    249c:	6f 93       	push	r22
    249e:	7f 93       	push	r23
    24a0:	8f 93       	push	r24
    24a2:	9f 93       	push	r25
    24a4:	af 93       	push	r26
    24a6:	bf 93       	push	r27
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	ef 93       	push	r30
    24ae:	ff 93       	push	r31
    24b0:	a0 91 1d 02 	lds	r26, 0x021D
    24b4:	b0 91 1e 02 	lds	r27, 0x021E
    24b8:	0d b6       	in	r0, 0x3d	; 61
    24ba:	0d 92       	st	X+, r0
    24bc:	0e b6       	in	r0, 0x3e	; 62
    24be:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    24c0:	0e 94 ad 03 	call	0x75a	; 0x75a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24c4:	a0 91 1d 02 	lds	r26, 0x021D
    24c8:	b0 91 1e 02 	lds	r27, 0x021E
    24cc:	cd 91       	ld	r28, X+
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	dd 91       	ld	r29, X+
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	ef 90       	pop	r14
    24f8:	df 90       	pop	r13
    24fa:	cf 90       	pop	r12
    24fc:	bf 90       	pop	r11
    24fe:	af 90       	pop	r10
    2500:	9f 90       	pop	r9
    2502:	8f 90       	pop	r8
    2504:	7f 90       	pop	r7
    2506:	6f 90       	pop	r6
    2508:	5f 90       	pop	r5
    250a:	4f 90       	pop	r4
    250c:	3f 90       	pop	r3
    250e:	2f 90       	pop	r2
    2510:	1f 90       	pop	r1
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2518:	08 95       	ret

0000251a <__udivmodsi4>:
    251a:	a1 e2       	ldi	r26, 0x21	; 33
    251c:	1a 2e       	mov	r1, r26
    251e:	aa 1b       	sub	r26, r26
    2520:	bb 1b       	sub	r27, r27
    2522:	fd 01       	movw	r30, r26
    2524:	0d c0       	rjmp	.+26     	; 0x2540 <__udivmodsi4_ep>

00002526 <__udivmodsi4_loop>:
    2526:	aa 1f       	adc	r26, r26
    2528:	bb 1f       	adc	r27, r27
    252a:	ee 1f       	adc	r30, r30
    252c:	ff 1f       	adc	r31, r31
    252e:	a2 17       	cp	r26, r18
    2530:	b3 07       	cpc	r27, r19
    2532:	e4 07       	cpc	r30, r20
    2534:	f5 07       	cpc	r31, r21
    2536:	20 f0       	brcs	.+8      	; 0x2540 <__udivmodsi4_ep>
    2538:	a2 1b       	sub	r26, r18
    253a:	b3 0b       	sbc	r27, r19
    253c:	e4 0b       	sbc	r30, r20
    253e:	f5 0b       	sbc	r31, r21

00002540 <__udivmodsi4_ep>:
    2540:	66 1f       	adc	r22, r22
    2542:	77 1f       	adc	r23, r23
    2544:	88 1f       	adc	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	1a 94       	dec	r1
    254a:	69 f7       	brne	.-38     	; 0x2526 <__udivmodsi4_loop>
    254c:	60 95       	com	r22
    254e:	70 95       	com	r23
    2550:	80 95       	com	r24
    2552:	90 95       	com	r25
    2554:	9b 01       	movw	r18, r22
    2556:	ac 01       	movw	r20, r24
    2558:	bd 01       	movw	r22, r26
    255a:	cf 01       	movw	r24, r30
    255c:	08 95       	ret

0000255e <memcpy>:
    255e:	fb 01       	movw	r30, r22
    2560:	dc 01       	movw	r26, r24
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <memcpy+0xa>
    2564:	01 90       	ld	r0, Z+
    2566:	0d 92       	st	X+, r0
    2568:	41 50       	subi	r20, 0x01	; 1
    256a:	50 40       	sbci	r21, 0x00	; 0
    256c:	d8 f7       	brcc	.-10     	; 0x2564 <memcpy+0x6>
    256e:	08 95       	ret

00002570 <_exit>:
    2570:	f8 94       	cli

00002572 <__stop_program>:
    2572:	ff cf       	rjmp	.-2      	; 0x2572 <__stop_program>
