
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000007f  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000269  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000137  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002a6  00000000  00000000  00000683  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000150  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007e  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ed       	ldi	r30, 0xD0	; 208
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include "functions.h"
#include <util/delay.h>


int main(void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
	USART_init(MYUBRR);
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 cc 00 	call	0x198	; 0x198 <USART_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	c0 e9       	ldi	r28, 0x90	; 144
 128:	d1 e0       	ldi	r29, 0x01	; 1
	
	unsigned char data='o';
	while (1)
	{
		data = USART_receive();
 12a:	0e 94 df 00 	call	0x1be	; 0x1be <USART_receive>
 12e:	20 e1       	ldi	r18, 0x10	; 16
 130:	37 e2       	ldi	r19, 0x27	; 39
 132:	fe 01       	movw	r30, r28
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d1 f7       	brne	.-12     	; 0x132 <main+0x18>
		_delay_ms(1000);
		USART_transmit(data - 32);
 13e:	80 52       	subi	r24, 0x20	; 32
 140:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_transmit>
 144:	f2 cf       	rjmp	.-28     	; 0x12a <main+0x10>

00000146 <PWM_init>:
//----------------Functions definition---------------//

void PWM_init(int initial_duty)
{
	// Timer 0
	TCCR0A = 0b10000001; // Control A: non-inverting signal on pin A (then the duty goes from 0 to 256), pin B disconnected, phase correct mode (7)
 146:	91 e8       	ldi	r25, 0x81	; 129
 148:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011; // Control B: prescaler by 64
 14a:	23 e0       	ldi	r18, 0x03	; 3
 14c:	25 bd       	out	0x25, r18	; 37

	OCR0A = initial_duty; // Compare register (from 0 to 256)
 14e:	87 bd       	out	0x27, r24	; 39

	DDRB = 0b10000000; //Set pin B7(13) as output pin
 150:	90 e8       	ldi	r25, 0x80	; 128
 152:	94 b9       	out	0x04, r25	; 4
	TCNT0 = 0; // Clear counter register just in case
 154:	16 bc       	out	0x26, r1	; 38

	// Timer 4
	TCCR4A = 0b10101001; // Control A: non-inverting signal on pins A,B and C (then the duty goes from 0 to 256), phase correct mode with 8 bits (7)
 156:	99 ea       	ldi	r25, 0xA9	; 169
 158:	90 93 a0 00 	sts	0x00A0, r25
	TCCR4B = 0b00000011; // Control B: prescaler by 64
 15c:	20 93 a1 00 	sts	0x00A1, r18

	OCR4AL = initial_duty; // Low compare registers to initial duty (from 0 to 256)
 160:	80 93 a8 00 	sts	0x00A8, r24
	OCR4BL = initial_duty;
 164:	80 93 aa 00 	sts	0x00AA, r24
	OCR4CL = initial_duty;
 168:	80 93 ac 00 	sts	0x00AC, r24

	OCR4AH = 0; // High compare registers to 0
 16c:	10 92 a9 00 	sts	0x00A9, r1
	OCR4BH = 0;
 170:	10 92 ab 00 	sts	0x00AB, r1
	OCR4CH = 0;
 174:	10 92 ad 00 	sts	0x00AD, r1

	DDRH = 0b00111000; //Set pins H3, H4 and H5 (6, 7 and 8) as output pins
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	80 93 01 01 	sts	0x0101, r24
	TCNT4L = 0; // Clear counter registers just in case
 17e:	10 92 a4 00 	sts	0x00A4, r1
	TCNT4H = 0;
 182:	10 92 a5 00 	sts	0x00A5, r1

	return;
} // PWM_init
 186:	08 95       	ret

00000188 <set_PWM_duty>:

void set_PWM_duty(int duty0, int duty4A, int duty4B, int duty4C)
{
	OCR0A = duty0;
 188:	87 bd       	out	0x27, r24	; 39
	OCR4AL = duty4A; 
 18a:	60 93 a8 00 	sts	0x00A8, r22
	OCR4BL = duty4B;
 18e:	40 93 aa 00 	sts	0x00AA, r20
	OCR4CL = duty4C;
 192:	20 93 ac 00 	sts	0x00AC, r18
	return;
} // set_PWM_duty
 196:	08 95       	ret

00000198 <USART_init>:

void USART_init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
 198:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 19c:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 1a0:	88 e1       	ldi	r24, 0x18	; 24
 1a2:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	80 93 c2 00 	sts	0x00C2, r24
} // USART_init
 1ac:	08 95       	ret

000001ae <USART_transmit>:

void USART_transmit(unsigned char data)
{
 1ae:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))
 1b0:	80 91 c0 00 	lds	r24, 0x00C0
 1b4:	85 ff       	sbrs	r24, 5
 1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <USART_transmit+0x2>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1b8:	90 93 c6 00 	sts	0x00C6, r25
}
 1bc:	08 95       	ret

000001be <USART_receive>:

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0)))
 1be:	80 91 c0 00 	lds	r24, 0x00C0
 1c2:	87 ff       	sbrs	r24, 7
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 1c6:	80 91 c6 00 	lds	r24, 0x00C6
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
