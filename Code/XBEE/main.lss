
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000434  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000007f  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000279  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012a  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002a6  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000156  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000094  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include "functions.h"
#include <util/delay.h>


int main(void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
	USART_init(MYUBRR);
 11e:	87 e6       	ldi	r24, 0x67	; 103
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 d7 00 	call	0x1ae	; 0x1ae <USART_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	c0 e9       	ldi	r28, 0x90	; 144
 128:	d1 e0       	ldi	r29, 0x01	; 1

	float data=0;
	while (1)
	{
		data = USART_receive();
 12a:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_receive>
 12e:	20 e1       	ldi	r18, 0x10	; 16
 130:	37 e2       	ldi	r19, 0x27	; 39
 132:	fe 01       	movw	r30, r28
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13c:	d1 f7       	brne	.-12     	; 0x132 <main+0x18>
		_delay_ms(1000);
		USART_transmit(-data/10.0);
 13e:	68 2f       	mov	r22, r24
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 8a 01 	call	0x314	; 0x314 <__floatunsisf>
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e2       	ldi	r20, 0x20	; 32
 150:	51 ec       	ldi	r21, 0xC1	; 193
 152:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__divsf3>
 156:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_transmit>
 15a:	e7 cf       	rjmp	.-50     	; 0x12a <main+0x10>

0000015c <PWM_init>:
//----------------Functions definition---------------//

void PWM_init(int initial_duty)
{
	// Timer 0
	TCCR0A = 0b10000001; // Control A: non-inverting signal on pin A (then the duty goes from 0 to 256), pin B disconnected, phase correct mode (7)
 15c:	91 e8       	ldi	r25, 0x81	; 129
 15e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011; // Control B: prescaler by 64
 160:	23 e0       	ldi	r18, 0x03	; 3
 162:	25 bd       	out	0x25, r18	; 37

	OCR0A = initial_duty; // Compare register (from 0 to 256)
 164:	87 bd       	out	0x27, r24	; 39

	DDRB = 0b10000000; //Set pin B7(13) as output pin
 166:	90 e8       	ldi	r25, 0x80	; 128
 168:	94 b9       	out	0x04, r25	; 4
	TCNT0 = 0; // Clear counter register just in case
 16a:	16 bc       	out	0x26, r1	; 38

	// Timer 4
	TCCR4A = 0b10101001; // Control A: non-inverting signal on pins A,B and C (then the duty goes from 0 to 256), phase correct mode with 8 bits (7)
 16c:	99 ea       	ldi	r25, 0xA9	; 169
 16e:	90 93 a0 00 	sts	0x00A0, r25
	TCCR4B = 0b00000011; // Control B: prescaler by 64
 172:	20 93 a1 00 	sts	0x00A1, r18

	OCR4AL = initial_duty; // Low compare registers to initial duty (from 0 to 256)
 176:	80 93 a8 00 	sts	0x00A8, r24
	OCR4BL = initial_duty;
 17a:	80 93 aa 00 	sts	0x00AA, r24
	OCR4CL = initial_duty;
 17e:	80 93 ac 00 	sts	0x00AC, r24

	OCR4AH = 0; // High compare registers to 0
 182:	10 92 a9 00 	sts	0x00A9, r1
	OCR4BH = 0;
 186:	10 92 ab 00 	sts	0x00AB, r1
	OCR4CH = 0;
 18a:	10 92 ad 00 	sts	0x00AD, r1

	DDRH = 0b00111000; //Set pins H3, H4 and H5 (6, 7 and 8) as output pins
 18e:	88 e3       	ldi	r24, 0x38	; 56
 190:	80 93 01 01 	sts	0x0101, r24
	TCNT4L = 0; // Clear counter registers just in case
 194:	10 92 a4 00 	sts	0x00A4, r1
	TCNT4H = 0;
 198:	10 92 a5 00 	sts	0x00A5, r1

	return;
} // PWM_init
 19c:	08 95       	ret

0000019e <set_PWM_duty>:

void set_PWM_duty(int duty0, int duty4A, int duty4B, int duty4C)
{
	OCR0A = duty0;
 19e:	87 bd       	out	0x27, r24	; 39
	OCR4AL = duty4A; 
 1a0:	60 93 a8 00 	sts	0x00A8, r22
	OCR4BL = duty4B;
 1a4:	40 93 aa 00 	sts	0x00AA, r20
	OCR4CL = duty4C;
 1a8:	20 93 ac 00 	sts	0x00AC, r18
	return;
} // set_PWM_duty
 1ac:	08 95       	ret

000001ae <USART_init>:

void USART_init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr >> 8);
 1ae:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 1b2:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 1bc:	8e e0       	ldi	r24, 0x0E	; 14
 1be:	80 93 c2 00 	sts	0x00C2, r24
} // USART_init
 1c2:	08 95       	ret

000001c4 <USART_transmit>:

void USART_transmit(float data)
{
 1c4:	9b 01       	movw	r18, r22
 1c6:	ac 01       	movw	r20, r24
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1 << UDRE0)))
 1c8:	80 91 c0 00 	lds	r24, 0x00C0
 1cc:	85 ff       	sbrs	r24, 5
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <USART_transmit+0x4>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1d0:	ca 01       	movw	r24, r20
 1d2:	b9 01       	movw	r22, r18
 1d4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__fixunssfsi>
 1d8:	60 93 c6 00 	sts	0x00C6, r22
}
 1dc:	08 95       	ret

000001de <USART_receive>:

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1 << RXC0)))
 1de:	80 91 c0 00 	lds	r24, 0x00C0
 1e2:	87 ff       	sbrs	r24, 7
 1e4:	fc cf       	rjmp	.-8      	; 0x1de <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 1e6:	80 91 c6 00 	lds	r24, 0x00C6
 1ea:	08 95       	ret

000001ec <__divsf3>:
 1ec:	0c d0       	rcall	.+24     	; 0x206 <__divsf3x>
 1ee:	e6 c0       	rjmp	.+460    	; 0x3bc <__fp_round>
 1f0:	de d0       	rcall	.+444    	; 0x3ae <__fp_pscB>
 1f2:	40 f0       	brcs	.+16     	; 0x204 <__divsf3+0x18>
 1f4:	d5 d0       	rcall	.+426    	; 0x3a0 <__fp_pscA>
 1f6:	30 f0       	brcs	.+12     	; 0x204 <__divsf3+0x18>
 1f8:	21 f4       	brne	.+8      	; 0x202 <__divsf3+0x16>
 1fa:	5f 3f       	cpi	r21, 0xFF	; 255
 1fc:	19 f0       	breq	.+6      	; 0x204 <__divsf3+0x18>
 1fe:	c7 c0       	rjmp	.+398    	; 0x38e <__fp_inf>
 200:	51 11       	cpse	r21, r1
 202:	10 c1       	rjmp	.+544    	; 0x424 <__fp_szero>
 204:	ca c0       	rjmp	.+404    	; 0x39a <__fp_nan>

00000206 <__divsf3x>:
 206:	eb d0       	rcall	.+470    	; 0x3de <__fp_split3>
 208:	98 f3       	brcs	.-26     	; 0x1f0 <__divsf3+0x4>

0000020a <__divsf3_pse>:
 20a:	99 23       	and	r25, r25
 20c:	c9 f3       	breq	.-14     	; 0x200 <__divsf3+0x14>
 20e:	55 23       	and	r21, r21
 210:	b1 f3       	breq	.-20     	; 0x1fe <__divsf3+0x12>
 212:	95 1b       	sub	r25, r21
 214:	55 0b       	sbc	r21, r21
 216:	bb 27       	eor	r27, r27
 218:	aa 27       	eor	r26, r26
 21a:	62 17       	cp	r22, r18
 21c:	73 07       	cpc	r23, r19
 21e:	84 07       	cpc	r24, r20
 220:	38 f0       	brcs	.+14     	; 0x230 <__divsf3_pse+0x26>
 222:	9f 5f       	subi	r25, 0xFF	; 255
 224:	5f 4f       	sbci	r21, 0xFF	; 255
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	44 1f       	adc	r20, r20
 22c:	aa 1f       	adc	r26, r26
 22e:	a9 f3       	breq	.-22     	; 0x21a <__divsf3_pse+0x10>
 230:	33 d0       	rcall	.+102    	; 0x298 <__divsf3_pse+0x8e>
 232:	0e 2e       	mov	r0, r30
 234:	3a f0       	brmi	.+14     	; 0x244 <__divsf3_pse+0x3a>
 236:	e0 e8       	ldi	r30, 0x80	; 128
 238:	30 d0       	rcall	.+96     	; 0x29a <__divsf3_pse+0x90>
 23a:	91 50       	subi	r25, 0x01	; 1
 23c:	50 40       	sbci	r21, 0x00	; 0
 23e:	e6 95       	lsr	r30
 240:	00 1c       	adc	r0, r0
 242:	ca f7       	brpl	.-14     	; 0x236 <__divsf3_pse+0x2c>
 244:	29 d0       	rcall	.+82     	; 0x298 <__divsf3_pse+0x8e>
 246:	fe 2f       	mov	r31, r30
 248:	27 d0       	rcall	.+78     	; 0x298 <__divsf3_pse+0x8e>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	88 1f       	adc	r24, r24
 250:	bb 1f       	adc	r27, r27
 252:	26 17       	cp	r18, r22
 254:	37 07       	cpc	r19, r23
 256:	48 07       	cpc	r20, r24
 258:	ab 07       	cpc	r26, r27
 25a:	b0 e8       	ldi	r27, 0x80	; 128
 25c:	09 f0       	breq	.+2      	; 0x260 <__divsf3_pse+0x56>
 25e:	bb 0b       	sbc	r27, r27
 260:	80 2d       	mov	r24, r0
 262:	bf 01       	movw	r22, r30
 264:	ff 27       	eor	r31, r31
 266:	93 58       	subi	r25, 0x83	; 131
 268:	5f 4f       	sbci	r21, 0xFF	; 255
 26a:	2a f0       	brmi	.+10     	; 0x276 <__divsf3_pse+0x6c>
 26c:	9e 3f       	cpi	r25, 0xFE	; 254
 26e:	51 05       	cpc	r21, r1
 270:	68 f0       	brcs	.+26     	; 0x28c <__divsf3_pse+0x82>
 272:	8d c0       	rjmp	.+282    	; 0x38e <__fp_inf>
 274:	d7 c0       	rjmp	.+430    	; 0x424 <__fp_szero>
 276:	5f 3f       	cpi	r21, 0xFF	; 255
 278:	ec f3       	brlt	.-6      	; 0x274 <__divsf3_pse+0x6a>
 27a:	98 3e       	cpi	r25, 0xE8	; 232
 27c:	dc f3       	brlt	.-10     	; 0x274 <__divsf3_pse+0x6a>
 27e:	86 95       	lsr	r24
 280:	77 95       	ror	r23
 282:	67 95       	ror	r22
 284:	b7 95       	ror	r27
 286:	f7 95       	ror	r31
 288:	9f 5f       	subi	r25, 0xFF	; 255
 28a:	c9 f7       	brne	.-14     	; 0x27e <__divsf3_pse+0x74>
 28c:	88 0f       	add	r24, r24
 28e:	91 1d       	adc	r25, r1
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	97 f9       	bld	r25, 7
 296:	08 95       	ret
 298:	e1 e0       	ldi	r30, 0x01	; 1
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	bb 1f       	adc	r27, r27
 2a2:	62 17       	cp	r22, r18
 2a4:	73 07       	cpc	r23, r19
 2a6:	84 07       	cpc	r24, r20
 2a8:	ba 07       	cpc	r27, r26
 2aa:	20 f0       	brcs	.+8      	; 0x2b4 <__divsf3_pse+0xaa>
 2ac:	62 1b       	sub	r22, r18
 2ae:	73 0b       	sbc	r23, r19
 2b0:	84 0b       	sbc	r24, r20
 2b2:	ba 0b       	sbc	r27, r26
 2b4:	ee 1f       	adc	r30, r30
 2b6:	88 f7       	brcc	.-30     	; 0x29a <__divsf3_pse+0x90>
 2b8:	e0 95       	com	r30
 2ba:	08 95       	ret

000002bc <__fixunssfsi>:
 2bc:	98 d0       	rcall	.+304    	; 0x3ee <__fp_splitA>
 2be:	88 f0       	brcs	.+34     	; 0x2e2 <__fixunssfsi+0x26>
 2c0:	9f 57       	subi	r25, 0x7F	; 127
 2c2:	90 f0       	brcs	.+36     	; 0x2e8 <__fixunssfsi+0x2c>
 2c4:	b9 2f       	mov	r27, r25
 2c6:	99 27       	eor	r25, r25
 2c8:	b7 51       	subi	r27, 0x17	; 23
 2ca:	a0 f0       	brcs	.+40     	; 0x2f4 <__fixunssfsi+0x38>
 2cc:	d1 f0       	breq	.+52     	; 0x302 <__fixunssfsi+0x46>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	1a f0       	brmi	.+6      	; 0x2de <__fixunssfsi+0x22>
 2d8:	ba 95       	dec	r27
 2da:	c9 f7       	brne	.-14     	; 0x2ce <__fixunssfsi+0x12>
 2dc:	12 c0       	rjmp	.+36     	; 0x302 <__fixunssfsi+0x46>
 2de:	b1 30       	cpi	r27, 0x01	; 1
 2e0:	81 f0       	breq	.+32     	; 0x302 <__fixunssfsi+0x46>
 2e2:	9f d0       	rcall	.+318    	; 0x422 <__fp_zero>
 2e4:	b1 e0       	ldi	r27, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	9c c0       	rjmp	.+312    	; 0x422 <__fp_zero>
 2ea:	67 2f       	mov	r22, r23
 2ec:	78 2f       	mov	r23, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	b8 5f       	subi	r27, 0xF8	; 248
 2f2:	39 f0       	breq	.+14     	; 0x302 <__fixunssfsi+0x46>
 2f4:	b9 3f       	cpi	r27, 0xF9	; 249
 2f6:	cc f3       	brlt	.-14     	; 0x2ea <__fixunssfsi+0x2e>
 2f8:	86 95       	lsr	r24
 2fa:	77 95       	ror	r23
 2fc:	67 95       	ror	r22
 2fe:	b3 95       	inc	r27
 300:	d9 f7       	brne	.-10     	; 0x2f8 <__fixunssfsi+0x3c>
 302:	3e f4       	brtc	.+14     	; 0x312 <__fixunssfsi+0x56>
 304:	90 95       	com	r25
 306:	80 95       	com	r24
 308:	70 95       	com	r23
 30a:	61 95       	neg	r22
 30c:	7f 4f       	sbci	r23, 0xFF	; 255
 30e:	8f 4f       	sbci	r24, 0xFF	; 255
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <__floatunsisf>:
 314:	e8 94       	clt
 316:	09 c0       	rjmp	.+18     	; 0x32a <__floatsisf+0x12>

00000318 <__floatsisf>:
 318:	97 fb       	bst	r25, 7
 31a:	3e f4       	brtc	.+14     	; 0x32a <__floatsisf+0x12>
 31c:	90 95       	com	r25
 31e:	80 95       	com	r24
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	8f 4f       	sbci	r24, 0xFF	; 255
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	99 23       	and	r25, r25
 32c:	a9 f0       	breq	.+42     	; 0x358 <__floatsisf+0x40>
 32e:	f9 2f       	mov	r31, r25
 330:	96 e9       	ldi	r25, 0x96	; 150
 332:	bb 27       	eor	r27, r27
 334:	93 95       	inc	r25
 336:	f6 95       	lsr	r31
 338:	87 95       	ror	r24
 33a:	77 95       	ror	r23
 33c:	67 95       	ror	r22
 33e:	b7 95       	ror	r27
 340:	f1 11       	cpse	r31, r1
 342:	f8 cf       	rjmp	.-16     	; 0x334 <__floatsisf+0x1c>
 344:	fa f4       	brpl	.+62     	; 0x384 <__floatsisf+0x6c>
 346:	bb 0f       	add	r27, r27
 348:	11 f4       	brne	.+4      	; 0x34e <__floatsisf+0x36>
 34a:	60 ff       	sbrs	r22, 0
 34c:	1b c0       	rjmp	.+54     	; 0x384 <__floatsisf+0x6c>
 34e:	6f 5f       	subi	r22, 0xFF	; 255
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	16 c0       	rjmp	.+44     	; 0x384 <__floatsisf+0x6c>
 358:	88 23       	and	r24, r24
 35a:	11 f0       	breq	.+4      	; 0x360 <__floatsisf+0x48>
 35c:	96 e9       	ldi	r25, 0x96	; 150
 35e:	11 c0       	rjmp	.+34     	; 0x382 <__floatsisf+0x6a>
 360:	77 23       	and	r23, r23
 362:	21 f0       	breq	.+8      	; 0x36c <__floatsisf+0x54>
 364:	9e e8       	ldi	r25, 0x8E	; 142
 366:	87 2f       	mov	r24, r23
 368:	76 2f       	mov	r23, r22
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__floatsisf+0x5e>
 36c:	66 23       	and	r22, r22
 36e:	71 f0       	breq	.+28     	; 0x38c <__floatsisf+0x74>
 370:	96 e8       	ldi	r25, 0x86	; 134
 372:	86 2f       	mov	r24, r22
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	2a f0       	brmi	.+10     	; 0x384 <__floatsisf+0x6c>
 37a:	9a 95       	dec	r25
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	88 1f       	adc	r24, r24
 382:	da f7       	brpl	.-10     	; 0x37a <__floatsisf+0x62>
 384:	88 0f       	add	r24, r24
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret

0000038e <__fp_inf>:
 38e:	97 f9       	bld	r25, 7
 390:	9f 67       	ori	r25, 0x7F	; 127
 392:	80 e8       	ldi	r24, 0x80	; 128
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	08 95       	ret

0000039a <__fp_nan>:
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	80 ec       	ldi	r24, 0xC0	; 192
 39e:	08 95       	ret

000003a0 <__fp_pscA>:
 3a0:	00 24       	eor	r0, r0
 3a2:	0a 94       	dec	r0
 3a4:	16 16       	cp	r1, r22
 3a6:	17 06       	cpc	r1, r23
 3a8:	18 06       	cpc	r1, r24
 3aa:	09 06       	cpc	r0, r25
 3ac:	08 95       	ret

000003ae <__fp_pscB>:
 3ae:	00 24       	eor	r0, r0
 3b0:	0a 94       	dec	r0
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	05 06       	cpc	r0, r21
 3ba:	08 95       	ret

000003bc <__fp_round>:
 3bc:	09 2e       	mov	r0, r25
 3be:	03 94       	inc	r0
 3c0:	00 0c       	add	r0, r0
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <__fp_round+0xc>
 3c4:	88 23       	and	r24, r24
 3c6:	52 f0       	brmi	.+20     	; 0x3dc <__fp_round+0x20>
 3c8:	bb 0f       	add	r27, r27
 3ca:	40 f4       	brcc	.+16     	; 0x3dc <__fp_round+0x20>
 3cc:	bf 2b       	or	r27, r31
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__fp_round+0x18>
 3d0:	60 ff       	sbrs	r22, 0
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__fp_round+0x20>
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__fp_split3>:
 3de:	57 fd       	sbrc	r21, 7
 3e0:	90 58       	subi	r25, 0x80	; 128
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	59 f0       	breq	.+22     	; 0x3fe <__fp_splitA+0x10>
 3e8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ea:	71 f0       	breq	.+28     	; 0x408 <__fp_splitA+0x1a>
 3ec:	47 95       	ror	r20

000003ee <__fp_splitA>:
 3ee:	88 0f       	add	r24, r24
 3f0:	97 fb       	bst	r25, 7
 3f2:	99 1f       	adc	r25, r25
 3f4:	61 f0       	breq	.+24     	; 0x40e <__fp_splitA+0x20>
 3f6:	9f 3f       	cpi	r25, 0xFF	; 255
 3f8:	79 f0       	breq	.+30     	; 0x418 <__fp_splitA+0x2a>
 3fa:	87 95       	ror	r24
 3fc:	08 95       	ret
 3fe:	12 16       	cp	r1, r18
 400:	13 06       	cpc	r1, r19
 402:	14 06       	cpc	r1, r20
 404:	55 1f       	adc	r21, r21
 406:	f2 cf       	rjmp	.-28     	; 0x3ec <__fp_split3+0xe>
 408:	46 95       	lsr	r20
 40a:	f1 df       	rcall	.-30     	; 0x3ee <__fp_splitA>
 40c:	08 c0       	rjmp	.+16     	; 0x41e <__fp_splitA+0x30>
 40e:	16 16       	cp	r1, r22
 410:	17 06       	cpc	r1, r23
 412:	18 06       	cpc	r1, r24
 414:	99 1f       	adc	r25, r25
 416:	f1 cf       	rjmp	.-30     	; 0x3fa <__fp_splitA+0xc>
 418:	86 95       	lsr	r24
 41a:	71 05       	cpc	r23, r1
 41c:	61 05       	cpc	r22, r1
 41e:	08 94       	sec
 420:	08 95       	ret

00000422 <__fp_zero>:
 422:	e8 94       	clt

00000424 <__fp_szero>:
 424:	bb 27       	eor	r27, r27
 426:	66 27       	eor	r22, r22
 428:	77 27       	eor	r23, r23
 42a:	cb 01       	movw	r24, r22
 42c:	97 f9       	bld	r25, 7
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
