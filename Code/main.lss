
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004b  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002af  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015e  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000269  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011f  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ee       	ldi	r30, 0xE8	; 232
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:
#include "main.h"
#include "test.h"
#include <util/delay.h>

int main(void)
{
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
	PWM_init(0);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 c9 00 	call	0x192	; 0x192 <PWM_init>
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12e:	20 e9       	ldi	r18, 0x90	; 144
 130:	31 e0       	ldi	r19, 0x01	; 1
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <main+0x18>
	int duty4B = 128;
	int duty4C = 128;

	int duty_final = 180;

	Set_PWM_duty(duty0, duty4A, duty4B, duty4C);
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	60 e8       	ldi	r22, 0x80	; 128
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	40 e8       	ldi	r20, 0x80	; 128
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	20 e8       	ldi	r18, 0x80	; 128
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Set_PWM_duty>
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	9a ee       	ldi	r25, 0xEA	; 234
 154:	20 e9       	ldi	r18, 0x90	; 144
 156:	31 e0       	ldi	r19, 0x01	; 1
 158:	f9 01       	movw	r30, r18
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 160:	d9 f7       	brne	.-10     	; 0x158 <main+0x3e>
 162:	c0 e8       	ldi	r28, 0x80	; 128
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	00 e4       	ldi	r16, 0x40	; 64
 168:	1c e9       	ldi	r17, 0x9C	; 156
	_delay_ms(6000);

	while (1)
	{
		Set_PWM_duty(duty0, duty4A, duty4B, duty4C);
 16a:	ce 01       	movw	r24, r28
 16c:	60 e8       	ldi	r22, 0x80	; 128
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	40 e8       	ldi	r20, 0x80	; 128
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	20 e8       	ldi	r18, 0x80	; 128
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <Set_PWM_duty>
		if (duty0 < duty_final)
 17c:	c4 3b       	cpi	r28, 0xB4	; 180
 17e:	d1 05       	cpc	r29, r1
 180:	1c f0       	brlt	.+6      	; 0x188 <main+0x6e>
 182:	c4 eb       	ldi	r28, 0xB4	; 180
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	01 c0       	rjmp	.+2      	; 0x18a <main+0x70>
		{
			duty0 = duty0 + 1;
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	c8 01       	movw	r24, r16
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x72>
 190:	ec cf       	rjmp	.-40     	; 0x16a <main+0x50>

00000192 <PWM_init>:
//----------------Functions definition---------------//

void PWM_init(int initial_duty)
{
	// Timer 0
	TCCR0A = 0b10000001; // Control A: non-inverting signal on pin A (then the duty goes from 0 to 256), pin B disconnected, phase correct mode (7)
 192:	91 e8       	ldi	r25, 0x81	; 129
 194:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011; // Control B: prescaler by 64
 196:	23 e0       	ldi	r18, 0x03	; 3
 198:	25 bd       	out	0x25, r18	; 37

	OCR0A = initial_duty; // Compare register (from 0 to 256)
 19a:	87 bd       	out	0x27, r24	; 39

	DDRB = 0b10000000; //Set pin B7(13) as output pin
 19c:	90 e8       	ldi	r25, 0x80	; 128
 19e:	94 b9       	out	0x04, r25	; 4
	TCNT0 = 0; // Clear counter register just in case
 1a0:	16 bc       	out	0x26, r1	; 38

	// Timer 4
	TCCR4A = 0b10101001; // Control A: non-inverting signal on pins A,B and C (then the duty goes from 0 to 256), phase correct mode with 8 bits (7)
 1a2:	99 ea       	ldi	r25, 0xA9	; 169
 1a4:	90 93 a0 00 	sts	0x00A0, r25
	TCCR4B = 0b00000011; // Control B: prescaler by 64
 1a8:	20 93 a1 00 	sts	0x00A1, r18

	OCR4AL = initial_duty; // Low compare registers to initial duty (from 0 to 256)
 1ac:	80 93 a8 00 	sts	0x00A8, r24
	OCR4BL = initial_duty;
 1b0:	80 93 aa 00 	sts	0x00AA, r24
	OCR4CL = initial_duty;
 1b4:	80 93 ac 00 	sts	0x00AC, r24

	OCR4AH = 0; // High compare registers to 0
 1b8:	10 92 a9 00 	sts	0x00A9, r1
	OCR4BH = 0;
 1bc:	10 92 ab 00 	sts	0x00AB, r1
	OCR4CH = 0;
 1c0:	10 92 ad 00 	sts	0x00AD, r1

	DDRH = 0b00111000; //Set pins H3, H4 and H5 (6, 7 and 8) as output pins
 1c4:	88 e3       	ldi	r24, 0x38	; 56
 1c6:	80 93 01 01 	sts	0x0101, r24
	TCNT4L = 0; // Clear counter registers just in case
 1ca:	10 92 a4 00 	sts	0x00A4, r1
	TCNT4H = 0;
 1ce:	10 92 a5 00 	sts	0x00A5, r1

	return;
}
 1d2:	08 95       	ret

000001d4 <Set_PWM_duty>:

void Set_PWM_duty(int duty0, int duty4A, int duty4B, int duty4C)
{
	OCR0A = duty0;
 1d4:	87 bd       	out	0x27, r24	; 39
	OCR4AL = duty4A; 
 1d6:	60 93 a8 00 	sts	0x00A8, r22
	OCR4BL = duty4B;
 1da:	40 93 aa 00 	sts	0x00AA, r20
	OCR4CL = duty4C;
 1de:	20 93 ac 00 	sts	0x00AC, r18
	return;
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
